"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@formatjs";
exports.ids = ["vendor-chunks/@formatjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@formatjs/fast-memoize/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@formatjs/fast-memoize/lib/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ memoize),\n/* harmony export */   strategies: () => (/* binding */ strategies)\n/* harmony export */ });\n//\n// Main\n//\nfunction memoize(fn, options) {\n    var cache = options && options.cache ? options.cache : cacheDefault;\n    var serializer = options && options.serializer ? options.serializer : serializerDefault;\n    var strategy = options && options.strategy ? options.strategy : strategyDefault;\n    return strategy(fn, {\n        cache: cache,\n        serializer: serializer\n    });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n    return value == null || typeof value === \"number\" || typeof value === \"boolean\"; // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\nfunction monadic(fn, cache, serializer, arg) {\n    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === \"undefined\") {\n        computedValue = fn.call(this, arg);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n    var args = Array.prototype.slice.call(arguments, 3);\n    var cacheKey = serializer(args);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === \"undefined\") {\n        computedValue = fn.apply(this, args);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n    return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n    var strategy = fn.length === 1 ? monadic : variadic;\n    return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n    return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n    return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function() {\n    return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nfunction ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n}\nObjectWithoutPrototypeCache.prototype.get = function(key) {\n    return this.cache[key];\n};\nObjectWithoutPrototypeCache.prototype.set = function(key, value) {\n    this.cache[key] = value;\n};\nvar cacheDefault = {\n    create: function create() {\n        // @ts-ignore\n        return new ObjectWithoutPrototypeCache();\n    }\n};\nvar strategies = {\n    variadic: strategyVariadic,\n    monadic: strategyMonadic\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2Zhc3QtbWVtb2l6ZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxFQUFFO0FBQ0YsT0FBTztBQUNQLEVBQUU7QUFDYSxTQUFTQSxRQUFRQyxFQUFFLEVBQUVDLE9BQU87SUFDdkMsSUFBSUMsUUFBUUQsV0FBV0EsUUFBUUMsS0FBSyxHQUFHRCxRQUFRQyxLQUFLLEdBQUdDO0lBQ3ZELElBQUlDLGFBQWFILFdBQVdBLFFBQVFHLFVBQVUsR0FBR0gsUUFBUUcsVUFBVSxHQUFHQztJQUN0RSxJQUFJQyxXQUFXTCxXQUFXQSxRQUFRSyxRQUFRLEdBQUdMLFFBQVFLLFFBQVEsR0FBR0M7SUFDaEUsT0FBT0QsU0FBU04sSUFBSTtRQUNoQkUsT0FBT0E7UUFDUEUsWUFBWUE7SUFDaEI7QUFDSjtBQUNBLEVBQUU7QUFDRixXQUFXO0FBQ1gsRUFBRTtBQUNGLFNBQVNJLFlBQVlDLEtBQUs7SUFDdEIsT0FBUUEsU0FBUyxRQUFRLE9BQU9BLFVBQVUsWUFBWSxPQUFPQSxVQUFVLFdBQVksZ0VBQWdFO0FBQ3ZKO0FBQ0EsU0FBU0MsUUFBUVYsRUFBRSxFQUFFRSxLQUFLLEVBQUVFLFVBQVUsRUFBRU8sR0FBRztJQUN2QyxJQUFJQyxXQUFXSixZQUFZRyxPQUFPQSxNQUFNUCxXQUFXTztJQUNuRCxJQUFJRSxnQkFBZ0JYLE1BQU1ZLEdBQUcsQ0FBQ0Y7SUFDOUIsSUFBSSxPQUFPQyxrQkFBa0IsYUFBYTtRQUN0Q0EsZ0JBQWdCYixHQUFHZSxJQUFJLENBQUMsSUFBSSxFQUFFSjtRQUM5QlQsTUFBTWMsR0FBRyxDQUFDSixVQUFVQztJQUN4QjtJQUNBLE9BQU9BO0FBQ1g7QUFDQSxTQUFTSSxTQUFTakIsRUFBRSxFQUFFRSxLQUFLLEVBQUVFLFVBQVU7SUFDbkMsSUFBSWMsT0FBT0MsTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNOLElBQUksQ0FBQ08sV0FBVztJQUNqRCxJQUFJVixXQUFXUixXQUFXYztJQUMxQixJQUFJTCxnQkFBZ0JYLE1BQU1ZLEdBQUcsQ0FBQ0Y7SUFDOUIsSUFBSSxPQUFPQyxrQkFBa0IsYUFBYTtRQUN0Q0EsZ0JBQWdCYixHQUFHdUIsS0FBSyxDQUFDLElBQUksRUFBRUw7UUFDL0JoQixNQUFNYyxHQUFHLENBQUNKLFVBQVVDO0lBQ3hCO0lBQ0EsT0FBT0E7QUFDWDtBQUNBLFNBQVNXLFNBQVN4QixFQUFFLEVBQUV5QixPQUFPLEVBQUVuQixRQUFRLEVBQUVKLEtBQUssRUFBRXdCLFNBQVM7SUFDckQsT0FBT3BCLFNBQVNxQixJQUFJLENBQUNGLFNBQVN6QixJQUFJRSxPQUFPd0I7QUFDN0M7QUFDQSxTQUFTbkIsZ0JBQWdCUCxFQUFFLEVBQUVDLE9BQU87SUFDaEMsSUFBSUssV0FBV04sR0FBRzRCLE1BQU0sS0FBSyxJQUFJbEIsVUFBVU87SUFDM0MsT0FBT08sU0FBU3hCLElBQUksSUFBSSxFQUFFTSxVQUFVTCxRQUFRQyxLQUFLLENBQUMyQixNQUFNLElBQUk1QixRQUFRRyxVQUFVO0FBQ2xGO0FBQ0EsU0FBUzBCLGlCQUFpQjlCLEVBQUUsRUFBRUMsT0FBTztJQUNqQyxPQUFPdUIsU0FBU3hCLElBQUksSUFBSSxFQUFFaUIsVUFBVWhCLFFBQVFDLEtBQUssQ0FBQzJCLE1BQU0sSUFBSTVCLFFBQVFHLFVBQVU7QUFDbEY7QUFDQSxTQUFTMkIsZ0JBQWdCL0IsRUFBRSxFQUFFQyxPQUFPO0lBQ2hDLE9BQU91QixTQUFTeEIsSUFBSSxJQUFJLEVBQUVVLFNBQVNULFFBQVFDLEtBQUssQ0FBQzJCLE1BQU0sSUFBSTVCLFFBQVFHLFVBQVU7QUFDakY7QUFDQSxFQUFFO0FBQ0YsYUFBYTtBQUNiLEVBQUU7QUFDRixJQUFJQyxvQkFBb0I7SUFDcEIsT0FBTzJCLEtBQUtDLFNBQVMsQ0FBQ1g7QUFDMUI7QUFDQSxFQUFFO0FBQ0YsUUFBUTtBQUNSLEVBQUU7QUFDRixTQUFTWTtJQUNMLElBQUksQ0FBQ2hDLEtBQUssR0FBR2lDLE9BQU9OLE1BQU0sQ0FBQztBQUMvQjtBQUNBSyw0QkFBNEJkLFNBQVMsQ0FBQ04sR0FBRyxHQUFHLFNBQVVzQixHQUFHO0lBQ3JELE9BQU8sSUFBSSxDQUFDbEMsS0FBSyxDQUFDa0MsSUFBSTtBQUMxQjtBQUNBRiw0QkFBNEJkLFNBQVMsQ0FBQ0osR0FBRyxHQUFHLFNBQVVvQixHQUFHLEVBQUUzQixLQUFLO0lBQzVELElBQUksQ0FBQ1AsS0FBSyxDQUFDa0MsSUFBSSxHQUFHM0I7QUFDdEI7QUFDQSxJQUFJTixlQUFlO0lBQ2YwQixRQUFRLFNBQVNBO1FBQ2IsYUFBYTtRQUNiLE9BQU8sSUFBSUs7SUFDZjtBQUNKO0FBQ08sSUFBSUcsYUFBYTtJQUNwQnBCLFVBQVVhO0lBQ1ZwQixTQUFTcUI7QUFDYixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VlZC1zaG9wLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9mYXN0LW1lbW9pemUvbGliL2luZGV4LmpzPzIzMTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIE1haW5cbi8vXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuLCBvcHRpb25zKSB7XG4gICAgdmFyIGNhY2hlID0gb3B0aW9ucyAmJiBvcHRpb25zLmNhY2hlID8gb3B0aW9ucy5jYWNoZSA6IGNhY2hlRGVmYXVsdDtcbiAgICB2YXIgc2VyaWFsaXplciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemVyID8gb3B0aW9ucy5zZXJpYWxpemVyIDogc2VyaWFsaXplckRlZmF1bHQ7XG4gICAgdmFyIHN0cmF0ZWd5ID0gb3B0aW9ucyAmJiBvcHRpb25zLnN0cmF0ZWd5ID8gb3B0aW9ucy5zdHJhdGVneSA6IHN0cmF0ZWd5RGVmYXVsdDtcbiAgICByZXR1cm4gc3RyYXRlZ3koZm4sIHtcbiAgICAgICAgY2FjaGU6IGNhY2hlLFxuICAgICAgICBzZXJpYWxpemVyOiBzZXJpYWxpemVyLFxuICAgIH0pO1xufVxuLy9cbi8vIFN0cmF0ZWd5XG4vL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyk7IC8vIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAndW5zYWZlJyBwcmltaXRpdmUgZm9yIG91ciBuZWVkc1xufVxuZnVuY3Rpb24gbW9uYWRpYyhmbiwgY2FjaGUsIHNlcmlhbGl6ZXIsIGFyZykge1xuICAgIHZhciBjYWNoZUtleSA9IGlzUHJpbWl0aXZlKGFyZykgPyBhcmcgOiBzZXJpYWxpemVyKGFyZyk7XG4gICAgdmFyIGNvbXB1dGVkVmFsdWUgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICh0eXBlb2YgY29tcHV0ZWRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29tcHV0ZWRWYWx1ZSA9IGZuLmNhbGwodGhpcywgYXJnKTtcbiAgICAgICAgY2FjaGUuc2V0KGNhY2hlS2V5LCBjb21wdXRlZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXB1dGVkVmFsdWU7XG59XG5mdW5jdGlvbiB2YXJpYWRpYyhmbiwgY2FjaGUsIHNlcmlhbGl6ZXIpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG4gICAgdmFyIGNhY2hlS2V5ID0gc2VyaWFsaXplcihhcmdzKTtcbiAgICB2YXIgY29tcHV0ZWRWYWx1ZSA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKHR5cGVvZiBjb21wdXRlZFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb21wdXRlZFZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgY29tcHV0ZWRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlZFZhbHVlO1xufVxuZnVuY3Rpb24gYXNzZW1ibGUoZm4sIGNvbnRleHQsIHN0cmF0ZWd5LCBjYWNoZSwgc2VyaWFsaXplKSB7XG4gICAgcmV0dXJuIHN0cmF0ZWd5LmJpbmQoY29udGV4dCwgZm4sIGNhY2hlLCBzZXJpYWxpemUpO1xufVxuZnVuY3Rpb24gc3RyYXRlZ3lEZWZhdWx0KGZuLCBvcHRpb25zKSB7XG4gICAgdmFyIHN0cmF0ZWd5ID0gZm4ubGVuZ3RoID09PSAxID8gbW9uYWRpYyA6IHZhcmlhZGljO1xuICAgIHJldHVybiBhc3NlbWJsZShmbiwgdGhpcywgc3RyYXRlZ3ksIG9wdGlvbnMuY2FjaGUuY3JlYXRlKCksIG9wdGlvbnMuc2VyaWFsaXplcik7XG59XG5mdW5jdGlvbiBzdHJhdGVneVZhcmlhZGljKGZuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGFzc2VtYmxlKGZuLCB0aGlzLCB2YXJpYWRpYywgb3B0aW9ucy5jYWNoZS5jcmVhdGUoKSwgb3B0aW9ucy5zZXJpYWxpemVyKTtcbn1cbmZ1bmN0aW9uIHN0cmF0ZWd5TW9uYWRpYyhmbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBhc3NlbWJsZShmbiwgdGhpcywgbW9uYWRpYywgb3B0aW9ucy5jYWNoZS5jcmVhdGUoKSwgb3B0aW9ucy5zZXJpYWxpemVyKTtcbn1cbi8vXG4vLyBTZXJpYWxpemVyXG4vL1xudmFyIHNlcmlhbGl6ZXJEZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmd1bWVudHMpO1xufTtcbi8vXG4vLyBDYWNoZVxuLy9cbmZ1bmN0aW9uIE9iamVjdFdpdGhvdXRQcm90b3R5cGVDYWNoZSgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbk9iamVjdFdpdGhvdXRQcm90b3R5cGVDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlW2tleV07XG59O1xuT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMuY2FjaGVba2V5XSA9IHZhbHVlO1xufTtcbnZhciBjYWNoZURlZmF1bHQgPSB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RXaXRob3V0UHJvdG90eXBlQ2FjaGUoKTtcbiAgICB9LFxufTtcbmV4cG9ydCB2YXIgc3RyYXRlZ2llcyA9IHtcbiAgICB2YXJpYWRpYzogc3RyYXRlZ3lWYXJpYWRpYyxcbiAgICBtb25hZGljOiBzdHJhdGVneU1vbmFkaWMsXG59O1xuIl0sIm5hbWVzIjpbIm1lbW9pemUiLCJmbiIsIm9wdGlvbnMiLCJjYWNoZSIsImNhY2hlRGVmYXVsdCIsInNlcmlhbGl6ZXIiLCJzZXJpYWxpemVyRGVmYXVsdCIsInN0cmF0ZWd5Iiwic3RyYXRlZ3lEZWZhdWx0IiwiaXNQcmltaXRpdmUiLCJ2YWx1ZSIsIm1vbmFkaWMiLCJhcmciLCJjYWNoZUtleSIsImNvbXB1dGVkVmFsdWUiLCJnZXQiLCJjYWxsIiwic2V0IiwidmFyaWFkaWMiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImFyZ3VtZW50cyIsImFwcGx5IiwiYXNzZW1ibGUiLCJjb250ZXh0Iiwic2VyaWFsaXplIiwiYmluZCIsImxlbmd0aCIsImNyZWF0ZSIsInN0cmF0ZWd5VmFyaWFkaWMiLCJzdHJhdGVneU1vbmFkaWMiLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlIiwiT2JqZWN0Iiwia2V5Iiwic3RyYXRlZ2llcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/fast-memoize/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBestPattern: () => (/* binding */ getBestPattern)\n/* harmony export */ });\n/* harmony import */ var _time_data_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-data.generated */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\");\n\n/**\n * Returns the best matching date time pattern if a date time skeleton\n * pattern is provided with a locale. Follows the Unicode specification:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns\n * @param skeleton date time skeleton pattern that possibly includes j, J or C\n * @param locale\n */ function getBestPattern(skeleton, locale) {\n    var skeletonCopy = \"\";\n    for(var patternPos = 0; patternPos < skeleton.length; patternPos++){\n        var patternChar = skeleton.charAt(patternPos);\n        if (patternChar === \"j\") {\n            var extraLength = 0;\n            while(patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar){\n                extraLength++;\n                patternPos++;\n            }\n            var hourLen = 1 + (extraLength & 1);\n            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);\n            var dayPeriodChar = \"a\";\n            var hourChar = getDefaultHourSymbolFromLocale(locale);\n            if (hourChar == \"H\" || hourChar == \"k\") {\n                dayPeriodLen = 0;\n            }\n            while(dayPeriodLen-- > 0){\n                skeletonCopy += dayPeriodChar;\n            }\n            while(hourLen-- > 0){\n                skeletonCopy = hourChar + skeletonCopy;\n            }\n        } else if (patternChar === \"J\") {\n            skeletonCopy += \"H\";\n        } else {\n            skeletonCopy += patternChar;\n        }\n    }\n    return skeletonCopy;\n}\n/**\n * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n * of the given `locale` to the corresponding time pattern.\n * @param locale\n */ function getDefaultHourSymbolFromLocale(locale) {\n    var hourCycle = locale.hourCycle;\n    if (hourCycle === undefined && // @ts-ignore hourCycle(s) is not identified yet\n    locale.hourCycles && // @ts-ignore\n    locale.hourCycles.length) {\n        // @ts-ignore\n        hourCycle = locale.hourCycles[0];\n    }\n    if (hourCycle) {\n        switch(hourCycle){\n            case \"h24\":\n                return \"k\";\n            case \"h23\":\n                return \"H\";\n            case \"h12\":\n                return \"h\";\n            case \"h11\":\n                return \"K\";\n            default:\n                throw new Error(\"Invalid hourCycle\");\n        }\n    }\n    // TODO: Once hourCycle is fully supported remove the following with data generation\n    var languageTag = locale.language;\n    var regionTag;\n    if (languageTag !== \"root\") {\n        regionTag = locale.maximize().region;\n    }\n    var hourCycles = _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[regionTag || \"\"] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[languageTag || \"\"] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"\".concat(languageTag, \"-001\")] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"001\"];\n    return hourCycles[0];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZGF0ZS10aW1lLXBhdHRlcm4tZ2VuZXJhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQ2pEOzs7Ozs7Q0FNQyxHQUNNLFNBQVNDLGVBQWVDLFFBQVEsRUFBRUMsTUFBTTtJQUMzQyxJQUFJQyxlQUFlO0lBQ25CLElBQUssSUFBSUMsYUFBYSxHQUFHQSxhQUFhSCxTQUFTSSxNQUFNLEVBQUVELGFBQWM7UUFDakUsSUFBSUUsY0FBY0wsU0FBU00sTUFBTSxDQUFDSDtRQUNsQyxJQUFJRSxnQkFBZ0IsS0FBSztZQUNyQixJQUFJRSxjQUFjO1lBQ2xCLE1BQU9KLGFBQWEsSUFBSUgsU0FBU0ksTUFBTSxJQUNuQ0osU0FBU00sTUFBTSxDQUFDSCxhQUFhLE9BQU9FLFlBQWE7Z0JBQ2pERTtnQkFDQUo7WUFDSjtZQUNBLElBQUlLLFVBQVUsSUFBS0QsQ0FBQUEsY0FBYztZQUNqQyxJQUFJRSxlQUFlRixjQUFjLElBQUksSUFBSSxJQUFLQSxDQUFBQSxlQUFlO1lBQzdELElBQUlHLGdCQUFnQjtZQUNwQixJQUFJQyxXQUFXQywrQkFBK0JYO1lBQzlDLElBQUlVLFlBQVksT0FBT0EsWUFBWSxLQUFLO2dCQUNwQ0YsZUFBZTtZQUNuQjtZQUNBLE1BQU9BLGlCQUFpQixFQUFHO2dCQUN2QlAsZ0JBQWdCUTtZQUNwQjtZQUNBLE1BQU9GLFlBQVksRUFBRztnQkFDbEJOLGVBQWVTLFdBQVdUO1lBQzlCO1FBQ0osT0FDSyxJQUFJRyxnQkFBZ0IsS0FBSztZQUMxQkgsZ0JBQWdCO1FBQ3BCLE9BQ0s7WUFDREEsZ0JBQWdCRztRQUNwQjtJQUNKO0lBQ0EsT0FBT0g7QUFDWDtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTVSwrQkFBK0JYLE1BQU07SUFDMUMsSUFBSVksWUFBWVosT0FBT1ksU0FBUztJQUNoQyxJQUFJQSxjQUFjQyxhQUNkLGdEQUFnRDtJQUNoRGIsT0FBT2MsVUFBVSxJQUNqQixhQUFhO0lBQ2JkLE9BQU9jLFVBQVUsQ0FBQ1gsTUFBTSxFQUFFO1FBQzFCLGFBQWE7UUFDYlMsWUFBWVosT0FBT2MsVUFBVSxDQUFDLEVBQUU7SUFDcEM7SUFDQSxJQUFJRixXQUFXO1FBQ1gsT0FBUUE7WUFDSixLQUFLO2dCQUNELE9BQU87WUFDWCxLQUFLO2dCQUNELE9BQU87WUFDWCxLQUFLO2dCQUNELE9BQU87WUFDWCxLQUFLO2dCQUNELE9BQU87WUFDWDtnQkFDSSxNQUFNLElBQUlHLE1BQU07UUFDeEI7SUFDSjtJQUNBLG9GQUFvRjtJQUNwRixJQUFJQyxjQUFjaEIsT0FBT2lCLFFBQVE7SUFDakMsSUFBSUM7SUFDSixJQUFJRixnQkFBZ0IsUUFBUTtRQUN4QkUsWUFBWWxCLE9BQU9tQixRQUFRLEdBQUdDLE1BQU07SUFDeEM7SUFDQSxJQUFJTixhQUFhakIsMERBQVEsQ0FBQ3FCLGFBQWEsR0FBRyxJQUN0Q3JCLDBEQUFRLENBQUNtQixlQUFlLEdBQUcsSUFDM0JuQiwwREFBUSxDQUFDLEdBQUd3QixNQUFNLENBQUNMLGFBQWEsUUFBUSxJQUN4Q25CLDBEQUFRLENBQUMsTUFBTTtJQUNuQixPQUFPaUIsVUFBVSxDQUFDLEVBQUU7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZWVkLXNob3AvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZGF0ZS10aW1lLXBhdHRlcm4tZ2VuZXJhdG9yLmpzP2Y3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGltZURhdGEgfSBmcm9tICcuL3RpbWUtZGF0YS5nZW5lcmF0ZWQnO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBiZXN0IG1hdGNoaW5nIGRhdGUgdGltZSBwYXR0ZXJuIGlmIGEgZGF0ZSB0aW1lIHNrZWxldG9uXG4gKiBwYXR0ZXJuIGlzIHByb3ZpZGVkIHdpdGggYSBsb2NhbGUuIEZvbGxvd3MgdGhlIFVuaWNvZGUgc3BlY2lmaWNhdGlvbjpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjdGFibGUtbWFwcGluZy1yZXF1ZXN0ZWQtdGltZS1za2VsZXRvbnMtdG8tcGF0dGVybnNcbiAqIEBwYXJhbSBza2VsZXRvbiBkYXRlIHRpbWUgc2tlbGV0b24gcGF0dGVybiB0aGF0IHBvc3NpYmx5IGluY2x1ZGVzIGosIEogb3IgQ1xuICogQHBhcmFtIGxvY2FsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdFBhdHRlcm4oc2tlbGV0b24sIGxvY2FsZSkge1xuICAgIHZhciBza2VsZXRvbkNvcHkgPSAnJztcbiAgICBmb3IgKHZhciBwYXR0ZXJuUG9zID0gMDsgcGF0dGVyblBvcyA8IHNrZWxldG9uLmxlbmd0aDsgcGF0dGVyblBvcysrKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuQ2hhciA9IHNrZWxldG9uLmNoYXJBdChwYXR0ZXJuUG9zKTtcbiAgICAgICAgaWYgKHBhdHRlcm5DaGFyID09PSAnaicpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUxlbmd0aCA9IDA7XG4gICAgICAgICAgICB3aGlsZSAocGF0dGVyblBvcyArIDEgPCBza2VsZXRvbi5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBza2VsZXRvbi5jaGFyQXQocGF0dGVyblBvcyArIDEpID09PSBwYXR0ZXJuQ2hhcikge1xuICAgICAgICAgICAgICAgIGV4dHJhTGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgcGF0dGVyblBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhvdXJMZW4gPSAxICsgKGV4dHJhTGVuZ3RoICYgMSk7XG4gICAgICAgICAgICB2YXIgZGF5UGVyaW9kTGVuID0gZXh0cmFMZW5ndGggPCAyID8gMSA6IDMgKyAoZXh0cmFMZW5ndGggPj4gMSk7XG4gICAgICAgICAgICB2YXIgZGF5UGVyaW9kQ2hhciA9ICdhJztcbiAgICAgICAgICAgIHZhciBob3VyQ2hhciA9IGdldERlZmF1bHRIb3VyU3ltYm9sRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgICAgICAgICAgaWYgKGhvdXJDaGFyID09ICdIJyB8fCBob3VyQ2hhciA9PSAnaycpIHtcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2RMZW4gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGRheVBlcmlvZExlbi0tID4gMCkge1xuICAgICAgICAgICAgICAgIHNrZWxldG9uQ29weSArPSBkYXlQZXJpb2RDaGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGhvdXJMZW4tLSA+IDApIHtcbiAgICAgICAgICAgICAgICBza2VsZXRvbkNvcHkgPSBob3VyQ2hhciArIHNrZWxldG9uQ29weTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXR0ZXJuQ2hhciA9PT0gJ0onKSB7XG4gICAgICAgICAgICBza2VsZXRvbkNvcHkgKz0gJ0gnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2tlbGV0b25Db3B5ICs9IHBhdHRlcm5DaGFyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBza2VsZXRvbkNvcHk7XG59XG4vKipcbiAqIE1hcHMgdGhlIFtob3VyIGN5Y2xlIHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0ludGwvTG9jYWxlL2hvdXJDeWNsZSlcbiAqIG9mIHRoZSBnaXZlbiBgbG9jYWxlYCB0byB0aGUgY29ycmVzcG9uZGluZyB0aW1lIHBhdHRlcm4uXG4gKiBAcGFyYW0gbG9jYWxlXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRIb3VyU3ltYm9sRnJvbUxvY2FsZShsb2NhbGUpIHtcbiAgICB2YXIgaG91ckN5Y2xlID0gbG9jYWxlLmhvdXJDeWNsZTtcbiAgICBpZiAoaG91ckN5Y2xlID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBob3VyQ3ljbGUocykgaXMgbm90IGlkZW50aWZpZWQgeWV0XG4gICAgICAgIGxvY2FsZS5ob3VyQ3ljbGVzICYmXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbG9jYWxlLmhvdXJDeWNsZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaG91ckN5Y2xlID0gbG9jYWxlLmhvdXJDeWNsZXNbMF07XG4gICAgfVxuICAgIGlmIChob3VyQ3ljbGUpIHtcbiAgICAgICAgc3dpdGNoIChob3VyQ3ljbGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2gyNCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdrJztcbiAgICAgICAgICAgIGNhc2UgJ2gyMyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdIJztcbiAgICAgICAgICAgIGNhc2UgJ2gxMic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoJztcbiAgICAgICAgICAgIGNhc2UgJ2gxMSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdLJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhvdXJDeWNsZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRPRE86IE9uY2UgaG91ckN5Y2xlIGlzIGZ1bGx5IHN1cHBvcnRlZCByZW1vdmUgdGhlIGZvbGxvd2luZyB3aXRoIGRhdGEgZ2VuZXJhdGlvblxuICAgIHZhciBsYW5ndWFnZVRhZyA9IGxvY2FsZS5sYW5ndWFnZTtcbiAgICB2YXIgcmVnaW9uVGFnO1xuICAgIGlmIChsYW5ndWFnZVRhZyAhPT0gJ3Jvb3QnKSB7XG4gICAgICAgIHJlZ2lvblRhZyA9IGxvY2FsZS5tYXhpbWl6ZSgpLnJlZ2lvbjtcbiAgICB9XG4gICAgdmFyIGhvdXJDeWNsZXMgPSB0aW1lRGF0YVtyZWdpb25UYWcgfHwgJyddIHx8XG4gICAgICAgIHRpbWVEYXRhW2xhbmd1YWdlVGFnIHx8ICcnXSB8fFxuICAgICAgICB0aW1lRGF0YVtcIlwiLmNvbmNhdChsYW5ndWFnZVRhZywgXCItMDAxXCIpXSB8fFxuICAgICAgICB0aW1lRGF0YVsnMDAxJ107XG4gICAgcmV0dXJuIGhvdXJDeWNsZXNbMF07XG59XG4iXSwibmFtZXMiOlsidGltZURhdGEiLCJnZXRCZXN0UGF0dGVybiIsInNrZWxldG9uIiwibG9jYWxlIiwic2tlbGV0b25Db3B5IiwicGF0dGVyblBvcyIsImxlbmd0aCIsInBhdHRlcm5DaGFyIiwiY2hhckF0IiwiZXh0cmFMZW5ndGgiLCJob3VyTGVuIiwiZGF5UGVyaW9kTGVuIiwiZGF5UGVyaW9kQ2hhciIsImhvdXJDaGFyIiwiZ2V0RGVmYXVsdEhvdXJTeW1ib2xGcm9tTG9jYWxlIiwiaG91ckN5Y2xlIiwidW5kZWZpbmVkIiwiaG91ckN5Y2xlcyIsIkVycm9yIiwibGFuZ3VhZ2VUYWciLCJsYW5ndWFnZSIsInJlZ2lvblRhZyIsIm1heGltaXplIiwicmVnaW9uIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/error.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorKind: () => (/* binding */ ErrorKind)\n/* harmony export */ });\nvar ErrorKind;\n(function(ErrorKind) {\n    /** Argument is unclosed (e.g. `{0`) */ ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n    /** Argument is empty (e.g. `{}`). */ ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n    /** Argument is malformed (e.g. `{foo!}``) */ ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n    /** Expect an argument type (e.g. `{foo,}`) */ ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n    /** Unsupported argument type (e.g. `{foo,foo}`) */ ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n    /** Expect an argument style (e.g. `{foo, number, }`) */ ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n    /** The number skeleton is invalid. */ ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n    /** The date time skeleton is invalid. */ ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */ ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */ ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */ ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n    /** Missing select argument options (e.g. `{foo, select}`) */ ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */ ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */ ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */ ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */ ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */ ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n    /**\n     * Expecting a message fragment after the `plural` or `selectordinal` selector\n     * (e.g. `{foo, plural, one}`)\n     */ ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */ ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n    /**\n     * Duplicate selectors in `plural` or `selectordinal` argument.\n     * (e.g. {foo, plural, one {#} one {#}})\n     */ ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n    /** Duplicate selectors in `select` argument.\n     * (e.g. {foo, select, apple {apple} apple {apple}})\n     */ ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n    /** Plural or select argument option must have `other` clause. */ ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */ ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n    /** The tag name is invalid. (e.g. `<123>foo</123>`) */ ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */ ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */ ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TYPE),\n/* harmony export */   createLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isArgumentElement),\n/* harmony export */   isDateElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement),\n/* harmony export */   isPoundElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPoundElement),\n/* harmony export */   isSelectElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement),\n/* harmony export */   isTagElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTagElement),\n/* harmony export */   isTimeElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n\n\n\n\nfunction pruneLocation(els) {\n    els.forEach(function(el) {\n        delete el.location;\n        if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement)(el)) {\n            for(var k in el.options){\n                delete el.options[k].location;\n                pruneLocation(el.options[k].value);\n            }\n        } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement)(el) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton)(el.style)) {\n            delete el.style.location;\n        } else if (((0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement)(el)) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton)(el.style)) {\n            delete el.style.location;\n        } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isTagElement)(el)) {\n            pruneLocation(el.children);\n        }\n    });\n}\nfunction parse(message, opts) {\n    if (opts === void 0) {\n        opts = {};\n    }\n    opts = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n        shouldParseSkeletons: true,\n        requiresOtherClause: true\n    }, opts);\n    var result = new _parser__WEBPACK_IMPORTED_MODULE_1__.Parser(message, opts).parse();\n    if (result.err) {\n        var error = SyntaxError(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind[result.err.kind]);\n        // @ts-expect-error Assign to error object\n        error.location = result.err.location;\n        // @ts-expect-error Assign to error object\n        error.originalMessage = result.err.message;\n        throw error;\n    }\n    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n        pruneLocation(result.val);\n    }\n    return result.val;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDRztBQUNGO0FBQzZIO0FBQy9KLFNBQVNXLGNBQWNDLEdBQUc7SUFDdEJBLElBQUlDLE9BQU8sQ0FBQyxTQUFVQyxFQUFFO1FBQ3BCLE9BQU9BLEdBQUdDLFFBQVE7UUFDbEIsSUFBSVAsdURBQWVBLENBQUNNLE9BQU9QLHVEQUFlQSxDQUFDTyxLQUFLO1lBQzVDLElBQUssSUFBSUUsS0FBS0YsR0FBR0csT0FBTyxDQUFFO2dCQUN0QixPQUFPSCxHQUFHRyxPQUFPLENBQUNELEVBQUUsQ0FBQ0QsUUFBUTtnQkFDN0JKLGNBQWNHLEdBQUdHLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDRSxLQUFLO1lBQ3JDO1FBQ0osT0FDSyxJQUFJYix1REFBZUEsQ0FBQ1MsT0FBT1Isd0RBQWdCQSxDQUFDUSxHQUFHSyxLQUFLLEdBQUc7WUFDeEQsT0FBT0wsR0FBR0ssS0FBSyxDQUFDSixRQUFRO1FBQzVCLE9BQ0ssSUFBSSxDQUFDWixxREFBYUEsQ0FBQ1csT0FBT0oscURBQWFBLENBQUNJLEdBQUUsS0FDM0NWLDBEQUFrQkEsQ0FBQ1UsR0FBR0ssS0FBSyxHQUFHO1lBQzlCLE9BQU9MLEdBQUdLLEtBQUssQ0FBQ0osUUFBUTtRQUM1QixPQUNLLElBQUlOLG9EQUFZQSxDQUFDSyxLQUFLO1lBQ3ZCSCxjQUFjRyxHQUFHTSxRQUFRO1FBQzdCO0lBQ0o7QUFDSjtBQUNPLFNBQVNDLE1BQU1DLE9BQU8sRUFBRUMsSUFBSTtJQUMvQixJQUFJQSxTQUFTLEtBQUssR0FBRztRQUFFQSxPQUFPLENBQUM7SUFBRztJQUNsQ0EsT0FBT3ZCLCtDQUFRQSxDQUFDO1FBQUV3QixzQkFBc0I7UUFBTUMscUJBQXFCO0lBQUssR0FBR0Y7SUFDM0UsSUFBSUcsU0FBUyxJQUFJeEIsMkNBQU1BLENBQUNvQixTQUFTQyxNQUFNRixLQUFLO0lBQzVDLElBQUlLLE9BQU9DLEdBQUcsRUFBRTtRQUNaLElBQUlDLFFBQVFDLFlBQVk1Qiw2Q0FBUyxDQUFDeUIsT0FBT0MsR0FBRyxDQUFDRyxJQUFJLENBQUM7UUFDbEQsMENBQTBDO1FBQzFDRixNQUFNYixRQUFRLEdBQUdXLE9BQU9DLEdBQUcsQ0FBQ1osUUFBUTtRQUNwQywwQ0FBMEM7UUFDMUNhLE1BQU1HLGVBQWUsR0FBR0wsT0FBT0MsR0FBRyxDQUFDTCxPQUFPO1FBQzFDLE1BQU1NO0lBQ1Y7SUFDQSxJQUFJLENBQUVMLENBQUFBLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLUyxlQUFlLEdBQUc7UUFDckVyQixjQUFjZSxPQUFPTyxHQUFHO0lBQzVCO0lBQ0EsT0FBT1AsT0FBT08sR0FBRztBQUNyQjtBQUN3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NlZWQtc2hvcC8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9pbmRleC5qcz8zNjEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBFcnJvcktpbmQgfSBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCB7IGlzRGF0ZUVsZW1lbnQsIGlzRGF0ZVRpbWVTa2VsZXRvbiwgaXNOdW1iZXJFbGVtZW50LCBpc051bWJlclNrZWxldG9uLCBpc1BsdXJhbEVsZW1lbnQsIGlzU2VsZWN0RWxlbWVudCwgaXNUYWdFbGVtZW50LCBpc1RpbWVFbGVtZW50LCB9IGZyb20gJy4vdHlwZXMnO1xuZnVuY3Rpb24gcHJ1bmVMb2NhdGlvbihlbHMpIHtcbiAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZGVsZXRlIGVsLmxvY2F0aW9uO1xuICAgICAgICBpZiAoaXNTZWxlY3RFbGVtZW50KGVsKSB8fCBpc1BsdXJhbEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGVsLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZWwub3B0aW9uc1trXS5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgICBwcnVuZUxvY2F0aW9uKGVsLm9wdGlvbnNba10udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTnVtYmVyRWxlbWVudChlbCkgJiYgaXNOdW1iZXJTa2VsZXRvbihlbC5zdHlsZSkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBlbC5zdHlsZS5sb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoaXNEYXRlRWxlbWVudChlbCkgfHwgaXNUaW1lRWxlbWVudChlbCkpICYmXG4gICAgICAgICAgICBpc0RhdGVUaW1lU2tlbGV0b24oZWwuc3R5bGUpKSB7XG4gICAgICAgICAgICBkZWxldGUgZWwuc3R5bGUubG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNUYWdFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgcHJ1bmVMb2NhdGlvbihlbC5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShtZXNzYWdlLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICBvcHRzID0gX19hc3NpZ24oeyBzaG91bGRQYXJzZVNrZWxldG9uczogdHJ1ZSwgcmVxdWlyZXNPdGhlckNsYXVzZTogdHJ1ZSB9LCBvcHRzKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFBhcnNlcihtZXNzYWdlLCBvcHRzKS5wYXJzZSgpO1xuICAgIGlmIChyZXN1bHQuZXJyKSB7XG4gICAgICAgIHZhciBlcnJvciA9IFN5bnRheEVycm9yKEVycm9yS2luZFtyZXN1bHQuZXJyLmtpbmRdKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBBc3NpZ24gdG8gZXJyb3Igb2JqZWN0XG4gICAgICAgIGVycm9yLmxvY2F0aW9uID0gcmVzdWx0LmVyci5sb2NhdGlvbjtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBBc3NpZ24gdG8gZXJyb3Igb2JqZWN0XG4gICAgICAgIGVycm9yLm9yaWdpbmFsTWVzc2FnZSA9IHJlc3VsdC5lcnIubWVzc2FnZTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmICghKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5jYXB0dXJlTG9jYXRpb24pKSB7XG4gICAgICAgIHBydW5lTG9jYXRpb24ocmVzdWx0LnZhbCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQudmFsO1xufVxuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJFcnJvcktpbmQiLCJQYXJzZXIiLCJpc0RhdGVFbGVtZW50IiwiaXNEYXRlVGltZVNrZWxldG9uIiwiaXNOdW1iZXJFbGVtZW50IiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzUGx1cmFsRWxlbWVudCIsImlzU2VsZWN0RWxlbWVudCIsImlzVGFnRWxlbWVudCIsImlzVGltZUVsZW1lbnQiLCJwcnVuZUxvY2F0aW9uIiwiZWxzIiwiZm9yRWFjaCIsImVsIiwibG9jYXRpb24iLCJrIiwib3B0aW9ucyIsInZhbHVlIiwic3R5bGUiLCJjaGlsZHJlbiIsInBhcnNlIiwibWVzc2FnZSIsIm9wdHMiLCJzaG91bGRQYXJzZVNrZWxldG9ucyIsInJlcXVpcmVzT3RoZXJDbGF1c2UiLCJyZXN1bHQiLCJlcnIiLCJlcnJvciIsIlN5bnRheEVycm9yIiwia2luZCIsIm9yaWdpbmFsTWVzc2FnZSIsImNhcHR1cmVMb2NhdGlvbiIsInZhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regex.generated */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\");\n/* harmony import */ var _formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/icu-skeleton-parser */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\");\n/* harmony import */ var _date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-time-pattern-generator */ \"(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\");\nvar _a;\n\n\n\n\n\n\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*\"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(\"\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*$\"));\nfunction createLocation(start, end) {\n    return {\n        start: start,\n        end: end\n    };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith;\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;\n};\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n    var re = RE(\"([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)\", \"yu\");\n    /**\n     * legacy Edge or Xbox One browser\n     * Unicode flag support: supported\n     * Pattern_Syntax support: not supported\n     * See https://github.com/formatjs/formatjs/issues/2822\n     */ REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec(\"a\")) === null || _a === void 0 ? void 0 : _a[0]) === \"a\";\n} catch (_) {\n    REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith ? function startsWith(s, search, position) {\n    return s.startsWith(search, position);\n} : function startsWith(s, search, position) {\n    return s.slice(position, position + search.length) === search;\n};\nvar fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint() {\n    var codePoints = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        codePoints[_i] = arguments[_i];\n    }\n    var elements = \"\";\n    var length = codePoints.length;\n    var i = 0;\n    var code;\n    while(length > i){\n        code = codePoints[i++];\n        if (code > 0x10ffff) throw RangeError(code + \" is not a valid code point\");\n        elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);\n    }\n    return elements;\n};\nvar fromEntries = // native\nhasNativeFromEntries ? Object.fromEntries : function fromEntries(entries) {\n    var obj = {};\n    for(var _i = 0, entries_1 = entries; _i < entries_1.length; _i++){\n        var _a = entries_1[_i], k = _a[0], v = _a[1];\n        obj[k] = v;\n    }\n    return obj;\n};\nvar codePointAt = hasNativeCodePointAt ? function codePointAt(s, index) {\n    return s.codePointAt(index);\n} : function codePointAt(s, index) {\n    var size = s.length;\n    if (index < 0 || index >= size) {\n        return undefined;\n    }\n    var first = s.charCodeAt(index);\n    var second;\n    return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\nvar trimStart = hasTrimStart ? function trimStart(s) {\n    return s.trimStart();\n} : function trimStart(s) {\n    return s.replace(SPACE_SEPARATOR_START_REGEX, \"\");\n};\nvar trimEnd = hasTrimEnd ? function trimEnd(s) {\n    return s.trimEnd();\n} : function trimEnd(s) {\n    return s.replace(SPACE_SEPARATOR_END_REGEX, \"\");\n};\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n    return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n    // Native\n    var IDENTIFIER_PREFIX_RE_1 = RE(\"([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)\", \"yu\");\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var _a;\n        IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n        var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n        return (_a = match[1]) !== null && _a !== void 0 ? _a : \"\";\n    };\n} else {\n    // IE11\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var match = [];\n        while(true){\n            var c = codePointAt(s, index);\n            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n                break;\n            }\n            match.push(c);\n            index += c >= 0x10000 ? 2 : 1;\n        }\n        return fromCodePoint.apply(void 0, match);\n    };\n}\nvar Parser = /** @class */ function() {\n    function Parser(message, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.message = message;\n        this.position = {\n            offset: 0,\n            line: 1,\n            column: 1\n        };\n        this.ignoreTag = !!options.ignoreTag;\n        this.locale = options.locale;\n        this.requiresOtherClause = !!options.requiresOtherClause;\n        this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n    }\n    Parser.prototype.parse = function() {\n        if (this.offset() !== 0) {\n            throw Error(\"parser can only be used once\");\n        }\n        return this.parseMessage(0, \"\", false);\n    };\n    Parser.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {\n        var elements = [];\n        while(!this.isEOF()){\n            var char = this.char();\n            if (char === 123 /* `{` */ ) {\n                var result = this.parseArgument(nestingLevel, expectingCloseTag);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            } else if (char === 125 /* `}` */  && nestingLevel > 0) {\n                break;\n            } else if (char === 35 /* `#` */  && (parentArgType === \"plural\" || parentArgType === \"selectordinal\")) {\n                var position = this.clonePosition();\n                this.bump();\n                elements.push({\n                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.pound,\n                    location: createLocation(position, this.clonePosition())\n                });\n            } else if (char === 60 /* `<` */  && !this.ignoreTag && this.peek() === 47 // char code for '/'\n            ) {\n                if (expectingCloseTag) {\n                    break;\n                } else {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n                }\n            } else if (char === 60 /* `<` */  && !this.ignoreTag && _isAlpha(this.peek() || 0)) {\n                var result = this.parseTag(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            } else {\n                var result = this.parseLiteral(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n        }\n        return {\n            val: elements,\n            err: null\n        };\n    };\n    /**\n     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n     * are accepted:\n     *\n     * ```\n     * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n     * tagName ::= [a-z] (PENChar)*\n     * PENChar ::=\n     *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n     * ```\n     *\n     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n     * since other tag-based engines like React allow it\n     */ Parser.prototype.parseTag = function(nestingLevel, parentArgType) {\n        var startPosition = this.clonePosition();\n        this.bump(); // `<`\n        var tagName = this.parseTagName();\n        this.bumpSpace();\n        if (this.bumpIf(\"/>\")) {\n            // Self closing tag\n            return {\n                val: {\n                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n                    value: \"<\".concat(tagName, \"/>\"),\n                    location: createLocation(startPosition, this.clonePosition())\n                },\n                err: null\n            };\n        } else if (this.bumpIf(\">\")) {\n            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n            if (childrenResult.err) {\n                return childrenResult;\n            }\n            var children = childrenResult.val;\n            // Expecting a close tag\n            var endTagStartPosition = this.clonePosition();\n            if (this.bumpIf(\"</\")) {\n                if (this.isEOF() || !_isAlpha(this.char())) {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                var closingTagNameStartPosition = this.clonePosition();\n                var closingTagName = this.parseTagName();\n                if (tagName !== closingTagName) {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n                }\n                this.bumpSpace();\n                if (!this.bumpIf(\">\")) {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                return {\n                    val: {\n                        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.tag,\n                        value: tagName,\n                        children: children,\n                        location: createLocation(startPosition, this.clonePosition())\n                    },\n                    err: null\n                };\n            } else {\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n            }\n        } else {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n        }\n    };\n    /**\n     * This method assumes that the caller has peeked ahead for the first tag character.\n     */ Parser.prototype.parseTagName = function() {\n        var startOffset = this.offset();\n        this.bump(); // the first tag name character\n        while(!this.isEOF() && _isPotentialElementNameChar(this.char())){\n            this.bump();\n        }\n        return this.message.slice(startOffset, this.offset());\n    };\n    Parser.prototype.parseLiteral = function(nestingLevel, parentArgType) {\n        var start = this.clonePosition();\n        var value = \"\";\n        while(true){\n            var parseQuoteResult = this.tryParseQuote(parentArgType);\n            if (parseQuoteResult) {\n                value += parseQuoteResult;\n                continue;\n            }\n            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n            if (parseUnquotedResult) {\n                value += parseUnquotedResult;\n                continue;\n            }\n            var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n            if (parseLeftAngleResult) {\n                value += parseLeftAngleResult;\n                continue;\n            }\n            break;\n        }\n        var location = createLocation(start, this.clonePosition());\n        return {\n            val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n                value: value,\n                location: location\n            },\n            err: null\n        };\n    };\n    Parser.prototype.tryParseLeftAngleBracket = function() {\n        if (!this.isEOF() && this.char() === 60 /* `<` */  && (this.ignoreTag || // If at the opening tag or closing tag position, bail.\n        !_isAlphaOrSlash(this.peek() || 0))) {\n            this.bump(); // `<`\n            return \"<\";\n        }\n        return null;\n    };\n    /**\n     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n     * a character that requires quoting (that is, \"only where needed\"), and works the same in\n     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n     */ Parser.prototype.tryParseQuote = function(parentArgType) {\n        if (this.isEOF() || this.char() !== 39 /* `'` */ ) {\n            return null;\n        }\n        // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n        // Check if is valid escaped character\n        switch(this.peek()){\n            case 39 /* `'` */ :\n                // double quote, should return as a single quote.\n                this.bump();\n                this.bump();\n                return \"'\";\n            // '{', '<', '>', '}'\n            case 123:\n            case 60:\n            case 62:\n            case 125:\n                break;\n            case 35:\n                if (parentArgType === \"plural\" || parentArgType === \"selectordinal\") {\n                    break;\n                }\n                return null;\n            default:\n                return null;\n        }\n        this.bump(); // apostrophe\n        var codePoints = [\n            this.char()\n        ]; // escaped char\n        this.bump();\n        // read chars until the optional closing apostrophe is found\n        while(!this.isEOF()){\n            var ch = this.char();\n            if (ch === 39 /* `'` */ ) {\n                if (this.peek() === 39 /* `'` */ ) {\n                    codePoints.push(39);\n                    // Bump one more time because we need to skip 2 characters.\n                    this.bump();\n                } else {\n                    // Optional closing apostrophe.\n                    this.bump();\n                    break;\n                }\n            } else {\n                codePoints.push(ch);\n            }\n            this.bump();\n        }\n        return fromCodePoint.apply(void 0, codePoints);\n    };\n    Parser.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {\n        if (this.isEOF()) {\n            return null;\n        }\n        var ch = this.char();\n        if (ch === 60 /* `<` */  || ch === 123 /* `{` */  || ch === 35 /* `#` */  && (parentArgType === \"plural\" || parentArgType === \"selectordinal\") || ch === 125 /* `}` */  && nestingLevel > 0) {\n            return null;\n        } else {\n            this.bump();\n            return fromCodePoint(ch);\n        }\n    };\n    Parser.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {\n        var openingBracePosition = this.clonePosition();\n        this.bump(); // `{`\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        if (this.char() === 125 /* `}` */ ) {\n            this.bump();\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        // argument name\n        var value = this.parseIdentifierIfPossible().value;\n        if (!value) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        switch(this.char()){\n            // Simple argument: `{name}`\n            case 125 /* `}` */ :\n                {\n                    this.bump(); // `}`\n                    return {\n                        val: {\n                            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.argument,\n                            // value does not include the opening and closing braces.\n                            value: value,\n                            location: createLocation(openingBracePosition, this.clonePosition())\n                        },\n                        err: null\n                    };\n                }\n            // Argument with options: `{name, format, ...}`\n            case 44 /* `,` */ :\n                {\n                    this.bump(); // `,`\n                    this.bumpSpace();\n                    if (this.isEOF()) {\n                        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n                    }\n                    return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n                }\n            default:\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n    };\n    /**\n     * Advance the parser until the end of the identifier, if it is currently on\n     * an identifier character. Return an empty string otherwise.\n     */ Parser.prototype.parseIdentifierIfPossible = function() {\n        var startingPosition = this.clonePosition();\n        var startOffset = this.offset();\n        var value = matchIdentifierAtIndex(this.message, startOffset);\n        var endOffset = startOffset + value.length;\n        this.bumpTo(endOffset);\n        var endPosition = this.clonePosition();\n        var location = createLocation(startingPosition, endPosition);\n        return {\n            value: value,\n            location: location\n        };\n    };\n    Parser.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {\n        var _a;\n        // Parse this range:\n        // {name, type, style}\n        //        ^---^\n        var typeStartPosition = this.clonePosition();\n        var argType = this.parseIdentifierIfPossible().value;\n        var typeEndPosition = this.clonePosition();\n        switch(argType){\n            case \"\":\n                // Expecting a style string number, date, time, plural, selectordinal, or select.\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n            case \"number\":\n            case \"date\":\n            case \"time\":\n                {\n                    // Parse this range:\n                    // {name, number, style}\n                    //              ^-------^\n                    this.bumpSpace();\n                    var styleAndLocation = null;\n                    if (this.bumpIf(\",\")) {\n                        this.bumpSpace();\n                        var styleStartPosition = this.clonePosition();\n                        var result = this.parseSimpleArgStyleIfPossible();\n                        if (result.err) {\n                            return result;\n                        }\n                        var style = trimEnd(result.val);\n                        if (style.length === 0) {\n                            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n                        }\n                        var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n                        styleAndLocation = {\n                            style: style,\n                            styleLocation: styleLocation\n                        };\n                    }\n                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                    if (argCloseResult.err) {\n                        return argCloseResult;\n                    }\n                    var location_1 = createLocation(openingBracePosition, this.clonePosition());\n                    // Extract style or skeleton\n                    if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, \"::\", 0)) {\n                        // Skeleton starts with `::`.\n                        var skeleton = trimStart(styleAndLocation.style.slice(2));\n                        if (argType === \"number\") {\n                            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n                            if (result.err) {\n                                return result;\n                            }\n                            return {\n                                val: {\n                                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number,\n                                    value: value,\n                                    location: location_1,\n                                    style: result.val\n                                },\n                                err: null\n                            };\n                        } else {\n                            if (skeleton.length === 0) {\n                                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n                            }\n                            var dateTimePattern = skeleton;\n                            // Get \"best match\" pattern only if locale is passed, if not, let it\n                            // pass as-is where `parseDateTimeSkeleton()` will throw an error\n                            // for unsupported patterns.\n                            if (this.locale) {\n                                dateTimePattern = (0,_date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__.getBestPattern)(skeleton, this.locale);\n                            }\n                            var style = {\n                                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.dateTime,\n                                pattern: dateTimePattern,\n                                location: styleAndLocation.styleLocation,\n                                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseDateTimeSkeleton)(dateTimePattern) : {}\n                            };\n                            var type = argType === \"date\" ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time;\n                            return {\n                                val: {\n                                    type: type,\n                                    value: value,\n                                    location: location_1,\n                                    style: style\n                                },\n                                err: null\n                            };\n                        }\n                    }\n                    // Regular style or no style.\n                    return {\n                        val: {\n                            type: argType === \"number\" ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number : argType === \"date\" ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time,\n                            value: value,\n                            location: location_1,\n                            style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null\n                        },\n                        err: null\n                    };\n                }\n            case \"plural\":\n            case \"selectordinal\":\n            case \"select\":\n                {\n                    // Parse this range:\n                    // {name, plural, options}\n                    //              ^---------^\n                    var typeEndPosition_1 = this.clonePosition();\n                    this.bumpSpace();\n                    if (!this.bumpIf(\",\")) {\n                        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, typeEndPosition_1)));\n                    }\n                    this.bumpSpace();\n                    // Parse offset:\n                    // {name, plural, offset:1, options}\n                    //                ^-----^\n                    //\n                    // or the first option:\n                    //\n                    // {name, plural, one {...} other {...}}\n                    //                ^--^\n                    var identifierAndLocation = this.parseIdentifierIfPossible();\n                    var pluralOffset = 0;\n                    if (argType !== \"select\" && identifierAndLocation.value === \"offset\") {\n                        if (!this.bumpIf(\":\")) {\n                            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n                        }\n                        this.bumpSpace();\n                        var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n                        if (result.err) {\n                            return result;\n                        }\n                        // Parse another identifier for option parsing\n                        this.bumpSpace();\n                        identifierAndLocation = this.parseIdentifierIfPossible();\n                        pluralOffset = result.val;\n                    }\n                    var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n                    if (optionsResult.err) {\n                        return optionsResult;\n                    }\n                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                    if (argCloseResult.err) {\n                        return argCloseResult;\n                    }\n                    var location_2 = createLocation(openingBracePosition, this.clonePosition());\n                    if (argType === \"select\") {\n                        return {\n                            val: {\n                                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.select,\n                                value: value,\n                                options: fromEntries(optionsResult.val),\n                                location: location_2\n                            },\n                            err: null\n                        };\n                    } else {\n                        return {\n                            val: {\n                                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.plural,\n                                value: value,\n                                options: fromEntries(optionsResult.val),\n                                offset: pluralOffset,\n                                pluralType: argType === \"plural\" ? \"cardinal\" : \"ordinal\",\n                                location: location_2\n                            },\n                            err: null\n                        };\n                    }\n                }\n            default:\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n        }\n    };\n    Parser.prototype.tryParseArgumentClose = function(openingBracePosition) {\n        // Parse: {value, number, ::currency/GBP }\n        //\n        if (this.isEOF() || this.char() !== 125 /* `}` */ ) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bump(); // `}`\n        return {\n            val: true,\n            err: null\n        };\n    };\n    /**\n     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n     */ Parser.prototype.parseSimpleArgStyleIfPossible = function() {\n        var nestedBraces = 0;\n        var startPosition = this.clonePosition();\n        while(!this.isEOF()){\n            var ch = this.char();\n            switch(ch){\n                case 39 /* `'` */ :\n                    {\n                        // Treat apostrophe as quoting but include it in the style part.\n                        // Find the end of the quoted literal text.\n                        this.bump();\n                        var apostrophePosition = this.clonePosition();\n                        if (!this.bumpUntil(\"'\")) {\n                            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n                        }\n                        this.bump();\n                        break;\n                    }\n                case 123 /* `{` */ :\n                    {\n                        nestedBraces += 1;\n                        this.bump();\n                        break;\n                    }\n                case 125 /* `}` */ :\n                    {\n                        if (nestedBraces > 0) {\n                            nestedBraces -= 1;\n                        } else {\n                            return {\n                                val: this.message.slice(startPosition.offset, this.offset()),\n                                err: null\n                            };\n                        }\n                        break;\n                    }\n                default:\n                    this.bump();\n                    break;\n            }\n        }\n        return {\n            val: this.message.slice(startPosition.offset, this.offset()),\n            err: null\n        };\n    };\n    Parser.prototype.parseNumberSkeletonFromString = function(skeleton, location) {\n        var tokens = [];\n        try {\n            tokens = (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeletonFromString)(skeleton);\n        } catch (e) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_NUMBER_SKELETON, location);\n        }\n        return {\n            val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.number,\n                tokens: tokens,\n                location: location,\n                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeleton)(tokens) : {}\n            },\n            err: null\n        };\n    };\n    /**\n     * @param nesting_level The current nesting level of messages.\n     *     This can be positive when parsing message fragment in select or plural argument options.\n     * @param parent_arg_type The parent argument's type.\n     * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n     *     the argument. It is a by-product of a previous parsing attempt.\n     * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n     *     between a pair of opening and closing tags. The nested message will not parse beyond\n     *     the closing tag boundary.\n     */ Parser.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n        var _a;\n        var hasOtherClause = false;\n        var options = [];\n        var parsedSelectors = new Set();\n        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;\n        // Parse:\n        // one {one apple}\n        // ^--^\n        while(true){\n            if (selector.length === 0) {\n                var startPosition = this.clonePosition();\n                if (parentArgType !== \"select\" && this.bumpIf(\"=\")) {\n                    // Try parse `={number}` selector\n                    var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n                    if (result.err) {\n                        return result;\n                    }\n                    selectorLocation = createLocation(startPosition, this.clonePosition());\n                    selector = this.message.slice(startPosition.offset, this.offset());\n                } else {\n                    break;\n                }\n            }\n            // Duplicate selector clauses\n            if (parsedSelectors.has(selector)) {\n                return this.error(parentArgType === \"select\" ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n            }\n            if (selector === \"other\") {\n                hasOtherClause = true;\n            }\n            // Parse:\n            // one {one apple}\n            //     ^----------^\n            this.bumpSpace();\n            var openingBracePosition = this.clonePosition();\n            if (!this.bumpIf(\"{\")) {\n                return this.error(parentArgType === \"select\" ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n            if (fragmentResult.err) {\n                return fragmentResult;\n            }\n            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n            if (argCloseResult.err) {\n                return argCloseResult;\n            }\n            options.push([\n                selector,\n                {\n                    value: fragmentResult.val,\n                    location: createLocation(openingBracePosition, this.clonePosition())\n                }\n            ]);\n            // Keep track of the existing selectors\n            parsedSelectors.add(selector);\n            // Prep next selector clause.\n            this.bumpSpace();\n            _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;\n        }\n        if (options.length === 0) {\n            return this.error(parentArgType === \"select\" ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        if (this.requiresOtherClause && !hasOtherClause) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        return {\n            val: options,\n            err: null\n        };\n    };\n    Parser.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {\n        var sign = 1;\n        var startingPosition = this.clonePosition();\n        if (this.bumpIf(\"+\")) {} else if (this.bumpIf(\"-\")) {\n            sign = -1;\n        }\n        var hasDigits = false;\n        var decimal = 0;\n        while(!this.isEOF()){\n            var ch = this.char();\n            if (ch >= 48 /* `0` */  && ch <= 57 /* `9` */ ) {\n                hasDigits = true;\n                decimal = decimal * 10 + (ch - 48);\n                this.bump();\n            } else {\n                break;\n            }\n        }\n        var location = createLocation(startingPosition, this.clonePosition());\n        if (!hasDigits) {\n            return this.error(expectNumberError, location);\n        }\n        decimal *= sign;\n        if (!isSafeInteger(decimal)) {\n            return this.error(invalidNumberError, location);\n        }\n        return {\n            val: decimal,\n            err: null\n        };\n    };\n    Parser.prototype.offset = function() {\n        return this.position.offset;\n    };\n    Parser.prototype.isEOF = function() {\n        return this.offset() === this.message.length;\n    };\n    Parser.prototype.clonePosition = function() {\n        // This is much faster than `Object.assign` or spread.\n        return {\n            offset: this.position.offset,\n            line: this.position.line,\n            column: this.position.column\n        };\n    };\n    /**\n     * Return the code point at the current position of the parser.\n     * Throws if the index is out of bound.\n     */ Parser.prototype.char = function() {\n        var offset = this.position.offset;\n        if (offset >= this.message.length) {\n            throw Error(\"out of bound\");\n        }\n        var code = codePointAt(this.message, offset);\n        if (code === undefined) {\n            throw Error(\"Offset \".concat(offset, \" is at invalid UTF-16 code unit boundary\"));\n        }\n        return code;\n    };\n    Parser.prototype.error = function(kind, location) {\n        return {\n            val: null,\n            err: {\n                kind: kind,\n                message: this.message,\n                location: location\n            }\n        };\n    };\n    /** Bump the parser to the next UTF-16 code unit. */ Parser.prototype.bump = function() {\n        if (this.isEOF()) {\n            return;\n        }\n        var code = this.char();\n        if (code === 10 /* '\\n' */ ) {\n            this.position.line += 1;\n            this.position.column = 1;\n            this.position.offset += 1;\n        } else {\n            this.position.column += 1;\n            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n            this.position.offset += code < 0x10000 ? 1 : 2;\n        }\n    };\n    /**\n     * If the substring starting at the current position of the parser has\n     * the given prefix, then bump the parser to the character immediately\n     * following the prefix and return true. Otherwise, don't bump the parser\n     * and return false.\n     */ Parser.prototype.bumpIf = function(prefix) {\n        if (startsWith(this.message, prefix, this.offset())) {\n            for(var i = 0; i < prefix.length; i++){\n                this.bump();\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Bump the parser until the pattern character is found and return `true`.\n     * Otherwise bump to the end of the file and return `false`.\n     */ Parser.prototype.bumpUntil = function(pattern) {\n        var currentOffset = this.offset();\n        var index = this.message.indexOf(pattern, currentOffset);\n        if (index >= 0) {\n            this.bumpTo(index);\n            return true;\n        } else {\n            this.bumpTo(this.message.length);\n            return false;\n        }\n    };\n    /**\n     * Bump the parser to the target offset.\n     * If target offset is beyond the end of the input, bump the parser to the end of the input.\n     */ Parser.prototype.bumpTo = function(targetOffset) {\n        if (this.offset() > targetOffset) {\n            throw Error(\"targetOffset \".concat(targetOffset, \" must be greater than or equal to the current offset \").concat(this.offset()));\n        }\n        targetOffset = Math.min(targetOffset, this.message.length);\n        while(true){\n            var offset = this.offset();\n            if (offset === targetOffset) {\n                break;\n            }\n            if (offset > targetOffset) {\n                throw Error(\"targetOffset \".concat(targetOffset, \" is at invalid UTF-16 code unit boundary\"));\n            }\n            this.bump();\n            if (this.isEOF()) {\n                break;\n            }\n        }\n    };\n    /** advance the parser through all whitespace to the next non-whitespace code unit. */ Parser.prototype.bumpSpace = function() {\n        while(!this.isEOF() && _isWhiteSpace(this.char())){\n            this.bump();\n        }\n    };\n    /**\n     * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n     * If the input has been exhausted, then this returns null.\n     */ Parser.prototype.peek = function() {\n        if (this.isEOF()) {\n            return null;\n        }\n        var code = this.char();\n        var offset = this.offset();\n        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n        return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n    };\n    return Parser;\n}();\n\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */ function _isAlpha(codepoint) {\n    return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;\n}\nfunction _isAlphaOrSlash(codepoint) {\n    return _isAlpha(codepoint) || codepoint === 47; /* '/' */ \n}\n/** See `parseTag` function docs. */ function _isPotentialElementNameChar(c) {\n    return c === 45 /* '-' */  || c === 46 /* '.' */  || c >= 48 && c <= 57 || c === 95 /* '_' */  || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */ function _isWhiteSpace(c) {\n    return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */ function _isPatternSyntax(c) {\n    return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPACE_SEPARATOR_REGEX: () => (/* binding */ SPACE_SEPARATOR_REGEX),\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvcmVnZXguZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQStCO0FBQ3hCLElBQUlBLHdCQUF3QiwrQ0FBK0M7QUFDM0UsSUFBSUMsb0JBQW9CLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlZWQtc2hvcC8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanM/YjZiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZ2VuZXJhdGVkIGZyb20gcmVnZXgtZ2VuLnRzXG5leHBvcnQgdmFyIFNQQUNFX1NFUEFSQVRPUl9SRUdFWCA9IC9bIFxceEEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMF0vO1xuZXhwb3J0IHZhciBXSElURV9TUEFDRV9SRUdFWCA9IC9bXFx0LVxcciBcXHg4NVxcdTIwMEVcXHUyMDBGXFx1MjAyOFxcdTIwMjldLztcbiJdLCJuYW1lcyI6WyJTUEFDRV9TRVBBUkFUT1JfUkVHRVgiLCJXSElURV9TUEFDRV9SRUdFWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   timeData: () => (/* binding */ timeData)\n/* harmony export */ });\n// @generated from time-data-gen.ts\n// prettier-ignore  \nvar timeData = {\n    \"AX\": [\n        \"H\"\n    ],\n    \"BQ\": [\n        \"H\"\n    ],\n    \"CP\": [\n        \"H\"\n    ],\n    \"CZ\": [\n        \"H\"\n    ],\n    \"DK\": [\n        \"H\"\n    ],\n    \"FI\": [\n        \"H\"\n    ],\n    \"ID\": [\n        \"H\"\n    ],\n    \"IS\": [\n        \"H\"\n    ],\n    \"ML\": [\n        \"H\"\n    ],\n    \"NE\": [\n        \"H\"\n    ],\n    \"RU\": [\n        \"H\"\n    ],\n    \"SE\": [\n        \"H\"\n    ],\n    \"SJ\": [\n        \"H\"\n    ],\n    \"SK\": [\n        \"H\"\n    ],\n    \"AS\": [\n        \"h\",\n        \"H\"\n    ],\n    \"BT\": [\n        \"h\",\n        \"H\"\n    ],\n    \"DJ\": [\n        \"h\",\n        \"H\"\n    ],\n    \"ER\": [\n        \"h\",\n        \"H\"\n    ],\n    \"GH\": [\n        \"h\",\n        \"H\"\n    ],\n    \"IN\": [\n        \"h\",\n        \"H\"\n    ],\n    \"LS\": [\n        \"h\",\n        \"H\"\n    ],\n    \"PG\": [\n        \"h\",\n        \"H\"\n    ],\n    \"PW\": [\n        \"h\",\n        \"H\"\n    ],\n    \"SO\": [\n        \"h\",\n        \"H\"\n    ],\n    \"TO\": [\n        \"h\",\n        \"H\"\n    ],\n    \"VU\": [\n        \"h\",\n        \"H\"\n    ],\n    \"WS\": [\n        \"h\",\n        \"H\"\n    ],\n    \"001\": [\n        \"H\",\n        \"h\"\n    ],\n    \"AL\": [\n        \"h\",\n        \"H\",\n        \"hB\"\n    ],\n    \"TD\": [\n        \"h\",\n        \"H\",\n        \"hB\"\n    ],\n    \"ca-ES\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"CF\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"CM\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"fr-CA\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"gl-ES\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"it-CH\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"it-IT\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"LU\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"NP\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"PF\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"SC\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"SM\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"SN\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"TF\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"VA\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"CY\": [\n        \"h\",\n        \"H\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GR\": [\n        \"h\",\n        \"H\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CO\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"DO\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KP\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KR\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"NA\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"PA\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"PR\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"VE\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"AC\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"AI\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"BW\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"BZ\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CC\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CK\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CX\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"DG\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"FK\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GB\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GG\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GI\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"IE\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"IM\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"IO\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"JE\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"LT\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"MK\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"MN\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"MS\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NF\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NG\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NR\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NU\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"PN\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"SH\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"SX\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"TA\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"ZA\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"af-ZA\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"AR\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"CL\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"CR\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"CU\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"EA\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-BO\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-BR\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-EC\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-ES\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-GQ\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-PE\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"GT\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"HN\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"IC\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KG\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KM\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"LK\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"MA\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"MX\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"NI\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"PY\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"SV\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"UY\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"JP\": [\n        \"H\",\n        \"h\",\n        \"K\"\n    ],\n    \"AD\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AM\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AO\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AW\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BJ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BL\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"CG\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"CI\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"CV\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"DE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"EE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"FR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GA\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GN\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GP\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GW\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"HR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"IL\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"IT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"KZ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MC\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MD\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MQ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MZ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"NC\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"NL\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"PM\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"PT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"RE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"RO\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"SI\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"SR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"ST\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"TG\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"TR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"WF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"YT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BD\": [\n        \"h\",\n        \"hB\",\n        \"H\"\n    ],\n    \"PK\": [\n        \"h\",\n        \"hB\",\n        \"H\"\n    ],\n    \"AZ\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"BA\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"BG\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"CH\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"GE\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"LI\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"ME\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"RS\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"UA\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"UZ\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"XK\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"AG\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"AU\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BB\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BS\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"CA\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"DM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"en-001\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"FJ\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"FM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GD\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GU\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GY\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"JM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"KI\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"KN\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"KY\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"LC\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"LR\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"MH\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"MP\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"MW\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"NZ\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SB\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SG\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SL\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SS\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SZ\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"TC\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"TT\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"UM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"US\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"VC\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"VG\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"VI\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"ZM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BO\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"EC\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"ES\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"GQ\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"PE\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"AE\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"ar-001\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"BH\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"DZ\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"EG\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"EH\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"HK\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"IQ\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"JO\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"KW\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"LB\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"LY\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"MO\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"MR\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"OM\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"PH\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"PS\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"QA\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"SA\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"SD\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"SY\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"TN\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"YE\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"AF\": [\n        \"H\",\n        \"hb\",\n        \"hB\",\n        \"h\"\n    ],\n    \"LA\": [\n        \"H\",\n        \"hb\",\n        \"hB\",\n        \"h\"\n    ],\n    \"CN\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"LV\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"TL\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"zu-ZA\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"CD\": [\n        \"hB\",\n        \"H\"\n    ],\n    \"IR\": [\n        \"hB\",\n        \"H\"\n    ],\n    \"hi-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"kn-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"ml-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"te-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"KH\": [\n        \"hB\",\n        \"h\",\n        \"H\",\n        \"hb\"\n    ],\n    \"ta-IN\": [\n        \"hB\",\n        \"h\",\n        \"hb\",\n        \"H\"\n    ],\n    \"BN\": [\n        \"hb\",\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"MY\": [\n        \"hb\",\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"ET\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"gu-IN\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"mr-IN\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"pa-IN\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"TW\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"KE\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ],\n    \"MM\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ],\n    \"TZ\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ],\n    \"UG\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/types.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* binding */ SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* binding */ TYPE),\n/* harmony export */   createLiteralElement: () => (/* binding */ createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* binding */ createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* binding */ isArgumentElement),\n/* harmony export */   isDateElement: () => (/* binding */ isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* binding */ isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* binding */ isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* binding */ isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* binding */ isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* binding */ isPluralElement),\n/* harmony export */   isPoundElement: () => (/* binding */ isPoundElement),\n/* harmony export */   isSelectElement: () => (/* binding */ isSelectElement),\n/* harmony export */   isTagElement: () => (/* binding */ isTagElement),\n/* harmony export */   isTimeElement: () => (/* binding */ isTimeElement)\n/* harmony export */ });\nvar TYPE;\n(function(TYPE) {\n    /**\n     * Raw text\n     */ TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */ TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n    /**\n     * Variable w/ number format\n     */ TYPE[TYPE[\"number\"] = 2] = \"number\";\n    /**\n     * Variable w/ date format\n     */ TYPE[TYPE[\"date\"] = 3] = \"date\";\n    /**\n     * Variable w/ time format\n     */ TYPE[TYPE[\"time\"] = 4] = \"time\";\n    /**\n     * Variable w/ select format\n     */ TYPE[TYPE[\"select\"] = 5] = \"select\";\n    /**\n     * Variable w/ plural format\n     */ TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n    /**\n     * Only possible within plural argument.\n     * This is the `#` symbol that will be substituted with the count.\n     */ TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n    /**\n     * XML-like tag\n     */ TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nvar SKELETON_TYPE;\n(function(SKELETON_TYPE) {\n    SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n    SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */ function isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n    return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n    return el.type === TYPE.pound;\n}\nfunction isTagElement(el) {\n    return el.type === TYPE.tag;\n}\nfunction isNumberSkeleton(el) {\n    return !!(el && typeof el === \"object\" && el.type === SKELETON_TYPE.number);\n}\nfunction isDateTimeSkeleton(el) {\n    return !!(el && typeof el === \"object\" && el.type === SKELETON_TYPE.dateTime);\n}\nfunction createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value\n    };\n}\nfunction createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBSUEsS0FBSztBQUNmLFVBQVVBLElBQUk7SUFDWDs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzVCOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDN0I7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUMzQjs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0lBQ3pCOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekI7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUMzQjs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQzNCOzs7S0FHQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQzFCOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7QUFDNUIsR0FBR0EsUUFBU0EsQ0FBQUEsT0FBTyxDQUFDO0FBQ2IsSUFBSUMsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQzdDQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0FBQ25ELEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDdEM7O0NBRUMsR0FDTSxTQUFTQyxpQkFBaUJDLEVBQUU7SUFDL0IsT0FBT0EsR0FBR0MsSUFBSSxLQUFLSixLQUFLSyxPQUFPO0FBQ25DO0FBQ08sU0FBU0Msa0JBQWtCSCxFQUFFO0lBQ2hDLE9BQU9BLEdBQUdDLElBQUksS0FBS0osS0FBS08sUUFBUTtBQUNwQztBQUNPLFNBQVNDLGdCQUFnQkwsRUFBRTtJQUM5QixPQUFPQSxHQUFHQyxJQUFJLEtBQUtKLEtBQUtTLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxjQUFjUCxFQUFFO0lBQzVCLE9BQU9BLEdBQUdDLElBQUksS0FBS0osS0FBS1csSUFBSTtBQUNoQztBQUNPLFNBQVNDLGNBQWNULEVBQUU7SUFDNUIsT0FBT0EsR0FBR0MsSUFBSSxLQUFLSixLQUFLYSxJQUFJO0FBQ2hDO0FBQ08sU0FBU0MsZ0JBQWdCWCxFQUFFO0lBQzlCLE9BQU9BLEdBQUdDLElBQUksS0FBS0osS0FBS2UsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGdCQUFnQmIsRUFBRTtJQUM5QixPQUFPQSxHQUFHQyxJQUFJLEtBQUtKLEtBQUtpQixNQUFNO0FBQ2xDO0FBQ08sU0FBU0MsZUFBZWYsRUFBRTtJQUM3QixPQUFPQSxHQUFHQyxJQUFJLEtBQUtKLEtBQUttQixLQUFLO0FBQ2pDO0FBQ08sU0FBU0MsYUFBYWpCLEVBQUU7SUFDM0IsT0FBT0EsR0FBR0MsSUFBSSxLQUFLSixLQUFLcUIsR0FBRztBQUMvQjtBQUNPLFNBQVNDLGlCQUFpQm5CLEVBQUU7SUFDL0IsT0FBTyxDQUFDLENBQUVBLENBQUFBLE1BQU0sT0FBT0EsT0FBTyxZQUFZQSxHQUFHQyxJQUFJLEtBQUtILGNBQWNRLE1BQU07QUFDOUU7QUFDTyxTQUFTYyxtQkFBbUJwQixFQUFFO0lBQ2pDLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxNQUFNLE9BQU9BLE9BQU8sWUFBWUEsR0FBR0MsSUFBSSxLQUFLSCxjQUFjdUIsUUFBUTtBQUNoRjtBQUNPLFNBQVNDLHFCQUFxQkMsS0FBSztJQUN0QyxPQUFPO1FBQ0h0QixNQUFNSixLQUFLSyxPQUFPO1FBQ2xCcUIsT0FBT0E7SUFDWDtBQUNKO0FBQ08sU0FBU0Msb0JBQW9CRCxLQUFLLEVBQUVFLEtBQUs7SUFDNUMsT0FBTztRQUNIeEIsTUFBTUosS0FBS1MsTUFBTTtRQUNqQmlCLE9BQU9BO1FBQ1BFLE9BQU9BO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3NlZWQtc2hvcC8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi90eXBlcy5qcz84ZGQxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgVFlQRTtcbihmdW5jdGlvbiAoVFlQRSkge1xuICAgIC8qKlxuICAgICAqIFJhdyB0ZXh0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wibGl0ZXJhbFwiXSA9IDBdID0gXCJsaXRlcmFsXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy9vIGFueSBmb3JtYXQsIGUuZyBgdmFyYCBpbiBgdGhpcyBpcyBhIHt2YXJ9YFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImFyZ3VtZW50XCJdID0gMV0gPSBcImFyZ3VtZW50XCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gbnVtYmVyIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcIm51bWJlclwiXSA9IDJdID0gXCJudW1iZXJcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBkYXRlIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImRhdGVcIl0gPSAzXSA9IFwiZGF0ZVwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHRpbWUgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1widGltZVwiXSA9IDRdID0gXCJ0aW1lXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gc2VsZWN0IGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInNlbGVjdFwiXSA9IDVdID0gXCJzZWxlY3RcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBwbHVyYWwgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wicGx1cmFsXCJdID0gNl0gPSBcInBsdXJhbFwiO1xuICAgIC8qKlxuICAgICAqIE9ubHkgcG9zc2libGUgd2l0aGluIHBsdXJhbCBhcmd1bWVudC5cbiAgICAgKiBUaGlzIGlzIHRoZSBgI2Agc3ltYm9sIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCB3aXRoIHRoZSBjb3VudC5cbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJwb3VuZFwiXSA9IDddID0gXCJwb3VuZFwiO1xuICAgIC8qKlxuICAgICAqIFhNTC1saWtlIHRhZ1xuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInRhZ1wiXSA9IDhdID0gXCJ0YWdcIjtcbn0pKFRZUEUgfHwgKFRZUEUgPSB7fSkpO1xuZXhwb3J0IHZhciBTS0VMRVRPTl9UWVBFO1xuKGZ1bmN0aW9uIChTS0VMRVRPTl9UWVBFKSB7XG4gICAgU0tFTEVUT05fVFlQRVtTS0VMRVRPTl9UWVBFW1wibnVtYmVyXCJdID0gMF0gPSBcIm51bWJlclwiO1xuICAgIFNLRUxFVE9OX1RZUEVbU0tFTEVUT05fVFlQRVtcImRhdGVUaW1lXCJdID0gMV0gPSBcImRhdGVUaW1lXCI7XG59KShTS0VMRVRPTl9UWVBFIHx8IChTS0VMRVRPTl9UWVBFID0ge30pKTtcbi8qKlxuICogVHlwZSBHdWFyZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5saXRlcmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJndW1lbnRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuYXJndW1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubnVtYmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5kYXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVGltZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50aW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLnNlbGVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BsdXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wbHVyYWw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQb3VuZEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wb3VuZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ0VsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50YWc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJTa2VsZXRvbihlbCkge1xuICAgIHJldHVybiAhIShlbCAmJiB0eXBlb2YgZWwgPT09ICdvYmplY3QnICYmIGVsLnR5cGUgPT09IFNLRUxFVE9OX1RZUEUubnVtYmVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVUaW1lU2tlbGV0b24oZWwpIHtcbiAgICByZXR1cm4gISEoZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiBlbC50eXBlID09PSBTS0VMRVRPTl9UWVBFLmRhdGVUaW1lKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXRlcmFsRWxlbWVudCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEUubGl0ZXJhbCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTnVtYmVyRWxlbWVudCh2YWx1ZSwgc3R5bGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFLm51bWJlcixcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJUWVBFIiwiU0tFTEVUT05fVFlQRSIsImlzTGl0ZXJhbEVsZW1lbnQiLCJlbCIsInR5cGUiLCJsaXRlcmFsIiwiaXNBcmd1bWVudEVsZW1lbnQiLCJhcmd1bWVudCIsImlzTnVtYmVyRWxlbWVudCIsIm51bWJlciIsImlzRGF0ZUVsZW1lbnQiLCJkYXRlIiwiaXNUaW1lRWxlbWVudCIsInRpbWUiLCJpc1NlbGVjdEVsZW1lbnQiLCJzZWxlY3QiLCJpc1BsdXJhbEVsZW1lbnQiLCJwbHVyYWwiLCJpc1BvdW5kRWxlbWVudCIsInBvdW5kIiwiaXNUYWdFbGVtZW50IiwidGFnIiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzRGF0ZVRpbWVTa2VsZXRvbiIsImRhdGVUaW1lIiwiY3JlYXRlTGl0ZXJhbEVsZW1lbnQiLCJ2YWx1ZSIsImNyZWF0ZU51bWJlckVsZW1lbnQiLCJzdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* binding */ parseDateTimeSkeleton)\n/* harmony export */ });\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */ var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */ function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function(match) {\n        var len = match.length;\n        switch(match[0]){\n            // Era\n            case \"G\":\n                result.era = len === 4 ? \"long\" : len === 5 ? \"narrow\" : \"short\";\n                break;\n            // Year\n            case \"y\":\n                result.year = len === 2 ? \"2-digit\" : \"numeric\";\n                break;\n            case \"Y\":\n            case \"u\":\n            case \"U\":\n            case \"r\":\n                throw new RangeError(\"`Y/u/U/r` (year) patterns are not supported, use `y` instead\");\n            // Quarter\n            case \"q\":\n            case \"Q\":\n                throw new RangeError(\"`q/Q` (quarter) patterns are not supported\");\n            // Month\n            case \"M\":\n            case \"L\":\n                result.month = [\n                    \"numeric\",\n                    \"2-digit\",\n                    \"short\",\n                    \"long\",\n                    \"narrow\"\n                ][len - 1];\n                break;\n            // Week\n            case \"w\":\n            case \"W\":\n                throw new RangeError(\"`w/W` (week) patterns are not supported\");\n            case \"d\":\n                result.day = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"D\":\n            case \"F\":\n            case \"g\":\n                throw new RangeError(\"`D/F/g` (day) patterns are not supported, use `d` instead\");\n            // Weekday\n            case \"E\":\n                result.weekday = len === 4 ? \"short\" : len === 5 ? \"narrow\" : \"short\";\n                break;\n            case \"e\":\n                if (len < 4) {\n                    throw new RangeError(\"`e..eee` (weekday) patterns are not supported\");\n                }\n                result.weekday = [\n                    \"short\",\n                    \"long\",\n                    \"narrow\",\n                    \"short\"\n                ][len - 4];\n                break;\n            case \"c\":\n                if (len < 4) {\n                    throw new RangeError(\"`c..ccc` (weekday) patterns are not supported\");\n                }\n                result.weekday = [\n                    \"short\",\n                    \"long\",\n                    \"narrow\",\n                    \"short\"\n                ][len - 4];\n                break;\n            // Period\n            case \"a\":\n                result.hour12 = true;\n                break;\n            case \"b\":\n            case \"B\":\n                throw new RangeError(\"`b/B` (period) patterns are not supported, use `a` instead\");\n            // Hour\n            case \"h\":\n                result.hourCycle = \"h12\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"H\":\n                result.hourCycle = \"h23\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"K\":\n                result.hourCycle = \"h11\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"k\":\n                result.hourCycle = \"h24\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"j\":\n            case \"J\":\n            case \"C\":\n                throw new RangeError(\"`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead\");\n            // Minute\n            case \"m\":\n                result.minute = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            // Second\n            case \"s\":\n                result.second = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"S\":\n            case \"A\":\n                throw new RangeError(\"`S/A` (second) patterns are not supported, use `s` instead\");\n            // Zone\n            case \"z\":\n                result.timeZoneName = len < 4 ? \"short\" : \"long\";\n                break;\n            case \"Z\":\n            case \"O\":\n            case \"v\":\n            case \"V\":\n            case \"X\":\n            case \"x\":\n                throw new RangeError(\"`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead\");\n        }\n        return \"\";\n    });\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* reexport safe */ _date_time__WEBPACK_IMPORTED_MODULE_0__.parseDateTimeSkeleton),\n/* harmony export */   parseNumberSkeleton: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var _date_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-time */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\");\n/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRCO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZWVkLXNob3AvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL2luZGV4LmpzP2MwMTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kYXRlLXRpbWUnO1xuZXhwb3J0ICogZnJvbSAnLi9udW1iZXInO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js":
/*!******************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/number.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNumberSkeleton: () => (/* binding */ parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* binding */ parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.generated */ \"(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\");\n\n\nfunction parseNumberSkeletonFromString(skeleton) {\n    if (skeleton.length === 0) {\n        throw new Error(\"Number skeleton cannot be empty\");\n    }\n    // Parse the skeleton\n    var stringTokens = skeleton.split(_regex_generated__WEBPACK_IMPORTED_MODULE_0__.WHITE_SPACE_REGEX).filter(function(x) {\n        return x.length > 0;\n    });\n    var tokens = [];\n    for(var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++){\n        var stringToken = stringTokens_1[_i];\n        var stemAndOptions = stringToken.split(\"/\");\n        if (stemAndOptions.length === 0) {\n            throw new Error(\"Invalid number skeleton\");\n        }\n        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);\n        for(var _a = 0, options_1 = options; _a < options_1.length; _a++){\n            var option = options_1[_a];\n            if (option.length === 0) {\n                throw new Error(\"Invalid number skeleton\");\n            }\n        }\n        tokens.push({\n            stem: stem,\n            options: options\n        });\n    }\n    return tokens;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, \"\");\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    if (str[str.length - 1] === \"r\") {\n        result.roundingPriority = \"morePrecision\";\n    } else if (str[str.length - 1] === \"s\") {\n        result.roundingPriority = \"lessPrecision\";\n    }\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function(_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== \"string\") {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        } else if (g2 === \"+\") {\n            result.minimumSignificantDigits = g1.length;\n        } else if (g1[0] === \"#\") {\n            result.maximumSignificantDigits = g1.length;\n        } else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length + (typeof g2 === \"string\" ? g2.length : 0);\n        }\n        return \"\";\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch(str){\n        case \"sign-auto\":\n            return {\n                signDisplay: \"auto\"\n            };\n        case \"sign-accounting\":\n        case \"()\":\n            return {\n                currencySign: \"accounting\"\n            };\n        case \"sign-always\":\n        case \"+!\":\n            return {\n                signDisplay: \"always\"\n            };\n        case \"sign-accounting-always\":\n        case \"()!\":\n            return {\n                signDisplay: \"always\",\n                currencySign: \"accounting\"\n            };\n        case \"sign-except-zero\":\n        case \"+?\":\n            return {\n                signDisplay: \"exceptZero\"\n            };\n        case \"sign-accounting-except-zero\":\n        case \"()?\":\n            return {\n                signDisplay: \"exceptZero\",\n                currencySign: \"accounting\"\n            };\n        case \"sign-never\":\n        case \"+_\":\n            return {\n                signDisplay: \"never\"\n            };\n    }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n    // Engineering\n    var result;\n    if (stem[0] === \"E\" && stem[1] === \"E\") {\n        result = {\n            notation: \"engineering\"\n        };\n        stem = stem.slice(2);\n    } else if (stem[0] === \"E\") {\n        result = {\n            notation: \"scientific\"\n        };\n        stem = stem.slice(1);\n    }\n    if (result) {\n        var signDisplay = stem.slice(0, 2);\n        if (signDisplay === \"+!\") {\n            result.signDisplay = \"always\";\n            stem = stem.slice(2);\n        } else if (signDisplay === \"+?\") {\n            result.signDisplay = \"exceptZero\";\n            stem = stem.slice(2);\n        }\n        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n            throw new Error(\"Malformed concise eng/scientific notation\");\n        }\n        result.minimumIntegerDigits = stem.length;\n    }\n    return result;\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */ function parseNumberSkeleton(tokens) {\n    var result = {};\n    for(var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++){\n        var token = tokens_1[_i];\n        switch(token.stem){\n            case \"percent\":\n            case \"%\":\n                result.style = \"percent\";\n                continue;\n            case \"%x100\":\n                result.style = \"percent\";\n                result.scale = 100;\n                continue;\n            case \"currency\":\n                result.style = \"currency\";\n                result.currency = token.options[0];\n                continue;\n            case \"group-off\":\n            case \",_\":\n                result.useGrouping = false;\n                continue;\n            case \"precision-integer\":\n            case \".\":\n                result.maximumFractionDigits = 0;\n                continue;\n            case \"measure-unit\":\n            case \"unit\":\n                result.style = \"unit\";\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case \"compact-short\":\n            case \"K\":\n                result.notation = \"compact\";\n                result.compactDisplay = \"short\";\n                continue;\n            case \"compact-long\":\n            case \"KK\":\n                result.notation = \"compact\";\n                result.compactDisplay = \"long\";\n                continue;\n            case \"scientific\":\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n                    notation: \"scientific\"\n                }), token.options.reduce(function(all, opt) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n                }, {}));\n                continue;\n            case \"engineering\":\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n                    notation: \"engineering\"\n                }), token.options.reduce(function(all, opt) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n                }, {}));\n                continue;\n            case \"notation-simple\":\n                result.notation = \"standard\";\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case \"unit-width-narrow\":\n                result.currencyDisplay = \"narrowSymbol\";\n                result.unitDisplay = \"narrow\";\n                continue;\n            case \"unit-width-short\":\n                result.currencyDisplay = \"code\";\n                result.unitDisplay = \"short\";\n                continue;\n            case \"unit-width-full-name\":\n                result.currencyDisplay = \"name\";\n                result.unitDisplay = \"long\";\n                continue;\n            case \"unit-width-iso-code\":\n                result.currencyDisplay = \"symbol\";\n                continue;\n            case \"scale\":\n                result.scale = parseFloat(token.options[0]);\n                continue;\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n            case \"integer-width\":\n                if (token.options.length > 1) {\n                    throw new RangeError(\"integer-width stems only accept a single optional option\");\n                }\n                token.options[0].replace(INTEGER_WIDTH_REGEX, function(_, g1, g2, g3, g4, g5) {\n                    if (g1) {\n                        result.minimumIntegerDigits = g2.length;\n                    } else if (g3 && g4) {\n                        throw new Error(\"We currently do not support maximum integer digits\");\n                    } else if (g5) {\n                        throw new Error(\"We currently do not support exact integer digits\");\n                    }\n                    return \"\";\n                });\n                continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n            result.minimumIntegerDigits = token.stem.length;\n            continue;\n        }\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            // Precision\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n            // precision-integer case\n            if (token.options.length > 1) {\n                throw new RangeError(\"Fraction-precision stems only accept a single optional option\");\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function(_, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === \"*\") {\n                    result.minimumFractionDigits = g1.length;\n                } else if (g3 && g3[0] === \"#\") {\n                    result.maximumFractionDigits = g3.length;\n                } else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                } else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return \"\";\n            });\n            var opt = token.options[0];\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n            if (opt === \"w\") {\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n                    trailingZeroDisplay: \"stripIfInteger\"\n                });\n            } else if (opt) {\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(opt));\n            }\n            continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), signOpts);\n        }\n        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n        if (conciseScientificAndEngineeringOpts) {\n            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), conciseScientificAndEngineeringOpts);\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0JBQStCO0FBQ3hCLElBQUlBLG9CQUFvQix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZWVkLXNob3AvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcz8xMWFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEBnZW5lcmF0ZWQgZnJvbSByZWdleC1nZW4udHNcbmV4cG9ydCB2YXIgV0hJVEVfU1BBQ0VfUkVHRVggPSAvW1xcdC1cXHIgXFx4ODVcXHUyMDBFXFx1MjAwRlxcdTIwMjhcXHUyMDI5XS9pO1xuIl0sIm5hbWVzIjpbIldISVRFX1NQQUNFX1JFR0VYIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/fast-memoize/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@formatjs/fast-memoize/lib/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ memoize),\n/* harmony export */   strategies: () => (/* binding */ strategies)\n/* harmony export */ });\n//\n// Main\n//\nfunction memoize(fn, options) {\n    var cache = options && options.cache ? options.cache : cacheDefault;\n    var serializer = options && options.serializer ? options.serializer : serializerDefault;\n    var strategy = options && options.strategy ? options.strategy : strategyDefault;\n    return strategy(fn, {\n        cache: cache,\n        serializer: serializer\n    });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n    return value == null || typeof value === \"number\" || typeof value === \"boolean\"; // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\nfunction monadic(fn, cache, serializer, arg) {\n    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === \"undefined\") {\n        computedValue = fn.call(this, arg);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n    var args = Array.prototype.slice.call(arguments, 3);\n    var cacheKey = serializer(args);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === \"undefined\") {\n        computedValue = fn.apply(this, args);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n    return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n    var strategy = fn.length === 1 ? monadic : variadic;\n    return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n    return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n    return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function() {\n    return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nfunction ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n}\nObjectWithoutPrototypeCache.prototype.get = function(key) {\n    return this.cache[key];\n};\nObjectWithoutPrototypeCache.prototype.set = function(key, value) {\n    this.cache[key] = value;\n};\nvar cacheDefault = {\n    create: function create() {\n        // @ts-ignore\n        return new ObjectWithoutPrototypeCache();\n    }\n};\nvar strategies = {\n    variadic: strategyVariadic,\n    monadic: strategyMonadic\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2Zhc3QtbWVtb2l6ZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxFQUFFO0FBQ0YsT0FBTztBQUNQLEVBQUU7QUFDYSxTQUFTQSxRQUFRQyxFQUFFLEVBQUVDLE9BQU87SUFDdkMsSUFBSUMsUUFBUUQsV0FBV0EsUUFBUUMsS0FBSyxHQUFHRCxRQUFRQyxLQUFLLEdBQUdDO0lBQ3ZELElBQUlDLGFBQWFILFdBQVdBLFFBQVFHLFVBQVUsR0FBR0gsUUFBUUcsVUFBVSxHQUFHQztJQUN0RSxJQUFJQyxXQUFXTCxXQUFXQSxRQUFRSyxRQUFRLEdBQUdMLFFBQVFLLFFBQVEsR0FBR0M7SUFDaEUsT0FBT0QsU0FBU04sSUFBSTtRQUNoQkUsT0FBT0E7UUFDUEUsWUFBWUE7SUFDaEI7QUFDSjtBQUNBLEVBQUU7QUFDRixXQUFXO0FBQ1gsRUFBRTtBQUNGLFNBQVNJLFlBQVlDLEtBQUs7SUFDdEIsT0FBUUEsU0FBUyxRQUFRLE9BQU9BLFVBQVUsWUFBWSxPQUFPQSxVQUFVLFdBQVksZ0VBQWdFO0FBQ3ZKO0FBQ0EsU0FBU0MsUUFBUVYsRUFBRSxFQUFFRSxLQUFLLEVBQUVFLFVBQVUsRUFBRU8sR0FBRztJQUN2QyxJQUFJQyxXQUFXSixZQUFZRyxPQUFPQSxNQUFNUCxXQUFXTztJQUNuRCxJQUFJRSxnQkFBZ0JYLE1BQU1ZLEdBQUcsQ0FBQ0Y7SUFDOUIsSUFBSSxPQUFPQyxrQkFBa0IsYUFBYTtRQUN0Q0EsZ0JBQWdCYixHQUFHZSxJQUFJLENBQUMsSUFBSSxFQUFFSjtRQUM5QlQsTUFBTWMsR0FBRyxDQUFDSixVQUFVQztJQUN4QjtJQUNBLE9BQU9BO0FBQ1g7QUFDQSxTQUFTSSxTQUFTakIsRUFBRSxFQUFFRSxLQUFLLEVBQUVFLFVBQVU7SUFDbkMsSUFBSWMsT0FBT0MsTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNOLElBQUksQ0FBQ08sV0FBVztJQUNqRCxJQUFJVixXQUFXUixXQUFXYztJQUMxQixJQUFJTCxnQkFBZ0JYLE1BQU1ZLEdBQUcsQ0FBQ0Y7SUFDOUIsSUFBSSxPQUFPQyxrQkFBa0IsYUFBYTtRQUN0Q0EsZ0JBQWdCYixHQUFHdUIsS0FBSyxDQUFDLElBQUksRUFBRUw7UUFDL0JoQixNQUFNYyxHQUFHLENBQUNKLFVBQVVDO0lBQ3hCO0lBQ0EsT0FBT0E7QUFDWDtBQUNBLFNBQVNXLFNBQVN4QixFQUFFLEVBQUV5QixPQUFPLEVBQUVuQixRQUFRLEVBQUVKLEtBQUssRUFBRXdCLFNBQVM7SUFDckQsT0FBT3BCLFNBQVNxQixJQUFJLENBQUNGLFNBQVN6QixJQUFJRSxPQUFPd0I7QUFDN0M7QUFDQSxTQUFTbkIsZ0JBQWdCUCxFQUFFLEVBQUVDLE9BQU87SUFDaEMsSUFBSUssV0FBV04sR0FBRzRCLE1BQU0sS0FBSyxJQUFJbEIsVUFBVU87SUFDM0MsT0FBT08sU0FBU3hCLElBQUksSUFBSSxFQUFFTSxVQUFVTCxRQUFRQyxLQUFLLENBQUMyQixNQUFNLElBQUk1QixRQUFRRyxVQUFVO0FBQ2xGO0FBQ0EsU0FBUzBCLGlCQUFpQjlCLEVBQUUsRUFBRUMsT0FBTztJQUNqQyxPQUFPdUIsU0FBU3hCLElBQUksSUFBSSxFQUFFaUIsVUFBVWhCLFFBQVFDLEtBQUssQ0FBQzJCLE1BQU0sSUFBSTVCLFFBQVFHLFVBQVU7QUFDbEY7QUFDQSxTQUFTMkIsZ0JBQWdCL0IsRUFBRSxFQUFFQyxPQUFPO0lBQ2hDLE9BQU91QixTQUFTeEIsSUFBSSxJQUFJLEVBQUVVLFNBQVNULFFBQVFDLEtBQUssQ0FBQzJCLE1BQU0sSUFBSTVCLFFBQVFHLFVBQVU7QUFDakY7QUFDQSxFQUFFO0FBQ0YsYUFBYTtBQUNiLEVBQUU7QUFDRixJQUFJQyxvQkFBb0I7SUFDcEIsT0FBTzJCLEtBQUtDLFNBQVMsQ0FBQ1g7QUFDMUI7QUFDQSxFQUFFO0FBQ0YsUUFBUTtBQUNSLEVBQUU7QUFDRixTQUFTWTtJQUNMLElBQUksQ0FBQ2hDLEtBQUssR0FBR2lDLE9BQU9OLE1BQU0sQ0FBQztBQUMvQjtBQUNBSyw0QkFBNEJkLFNBQVMsQ0FBQ04sR0FBRyxHQUFHLFNBQVVzQixHQUFHO0lBQ3JELE9BQU8sSUFBSSxDQUFDbEMsS0FBSyxDQUFDa0MsSUFBSTtBQUMxQjtBQUNBRiw0QkFBNEJkLFNBQVMsQ0FBQ0osR0FBRyxHQUFHLFNBQVVvQixHQUFHLEVBQUUzQixLQUFLO0lBQzVELElBQUksQ0FBQ1AsS0FBSyxDQUFDa0MsSUFBSSxHQUFHM0I7QUFDdEI7QUFDQSxJQUFJTixlQUFlO0lBQ2YwQixRQUFRLFNBQVNBO1FBQ2IsYUFBYTtRQUNiLE9BQU8sSUFBSUs7SUFDZjtBQUNKO0FBQ08sSUFBSUcsYUFBYTtJQUNwQnBCLFVBQVVhO0lBQ1ZwQixTQUFTcUI7QUFDYixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VlZC1zaG9wLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9mYXN0LW1lbW9pemUvbGliL2luZGV4LmpzPzIzMTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIE1haW5cbi8vXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuLCBvcHRpb25zKSB7XG4gICAgdmFyIGNhY2hlID0gb3B0aW9ucyAmJiBvcHRpb25zLmNhY2hlID8gb3B0aW9ucy5jYWNoZSA6IGNhY2hlRGVmYXVsdDtcbiAgICB2YXIgc2VyaWFsaXplciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemVyID8gb3B0aW9ucy5zZXJpYWxpemVyIDogc2VyaWFsaXplckRlZmF1bHQ7XG4gICAgdmFyIHN0cmF0ZWd5ID0gb3B0aW9ucyAmJiBvcHRpb25zLnN0cmF0ZWd5ID8gb3B0aW9ucy5zdHJhdGVneSA6IHN0cmF0ZWd5RGVmYXVsdDtcbiAgICByZXR1cm4gc3RyYXRlZ3koZm4sIHtcbiAgICAgICAgY2FjaGU6IGNhY2hlLFxuICAgICAgICBzZXJpYWxpemVyOiBzZXJpYWxpemVyLFxuICAgIH0pO1xufVxuLy9cbi8vIFN0cmF0ZWd5XG4vL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyk7IC8vIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAndW5zYWZlJyBwcmltaXRpdmUgZm9yIG91ciBuZWVkc1xufVxuZnVuY3Rpb24gbW9uYWRpYyhmbiwgY2FjaGUsIHNlcmlhbGl6ZXIsIGFyZykge1xuICAgIHZhciBjYWNoZUtleSA9IGlzUHJpbWl0aXZlKGFyZykgPyBhcmcgOiBzZXJpYWxpemVyKGFyZyk7XG4gICAgdmFyIGNvbXB1dGVkVmFsdWUgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICh0eXBlb2YgY29tcHV0ZWRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29tcHV0ZWRWYWx1ZSA9IGZuLmNhbGwodGhpcywgYXJnKTtcbiAgICAgICAgY2FjaGUuc2V0KGNhY2hlS2V5LCBjb21wdXRlZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXB1dGVkVmFsdWU7XG59XG5mdW5jdGlvbiB2YXJpYWRpYyhmbiwgY2FjaGUsIHNlcmlhbGl6ZXIpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG4gICAgdmFyIGNhY2hlS2V5ID0gc2VyaWFsaXplcihhcmdzKTtcbiAgICB2YXIgY29tcHV0ZWRWYWx1ZSA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKHR5cGVvZiBjb21wdXRlZFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb21wdXRlZFZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgY29tcHV0ZWRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlZFZhbHVlO1xufVxuZnVuY3Rpb24gYXNzZW1ibGUoZm4sIGNvbnRleHQsIHN0cmF0ZWd5LCBjYWNoZSwgc2VyaWFsaXplKSB7XG4gICAgcmV0dXJuIHN0cmF0ZWd5LmJpbmQoY29udGV4dCwgZm4sIGNhY2hlLCBzZXJpYWxpemUpO1xufVxuZnVuY3Rpb24gc3RyYXRlZ3lEZWZhdWx0KGZuLCBvcHRpb25zKSB7XG4gICAgdmFyIHN0cmF0ZWd5ID0gZm4ubGVuZ3RoID09PSAxID8gbW9uYWRpYyA6IHZhcmlhZGljO1xuICAgIHJldHVybiBhc3NlbWJsZShmbiwgdGhpcywgc3RyYXRlZ3ksIG9wdGlvbnMuY2FjaGUuY3JlYXRlKCksIG9wdGlvbnMuc2VyaWFsaXplcik7XG59XG5mdW5jdGlvbiBzdHJhdGVneVZhcmlhZGljKGZuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGFzc2VtYmxlKGZuLCB0aGlzLCB2YXJpYWRpYywgb3B0aW9ucy5jYWNoZS5jcmVhdGUoKSwgb3B0aW9ucy5zZXJpYWxpemVyKTtcbn1cbmZ1bmN0aW9uIHN0cmF0ZWd5TW9uYWRpYyhmbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBhc3NlbWJsZShmbiwgdGhpcywgbW9uYWRpYywgb3B0aW9ucy5jYWNoZS5jcmVhdGUoKSwgb3B0aW9ucy5zZXJpYWxpemVyKTtcbn1cbi8vXG4vLyBTZXJpYWxpemVyXG4vL1xudmFyIHNlcmlhbGl6ZXJEZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmd1bWVudHMpO1xufTtcbi8vXG4vLyBDYWNoZVxuLy9cbmZ1bmN0aW9uIE9iamVjdFdpdGhvdXRQcm90b3R5cGVDYWNoZSgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbk9iamVjdFdpdGhvdXRQcm90b3R5cGVDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlW2tleV07XG59O1xuT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMuY2FjaGVba2V5XSA9IHZhbHVlO1xufTtcbnZhciBjYWNoZURlZmF1bHQgPSB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RXaXRob3V0UHJvdG90eXBlQ2FjaGUoKTtcbiAgICB9LFxufTtcbmV4cG9ydCB2YXIgc3RyYXRlZ2llcyA9IHtcbiAgICB2YXJpYWRpYzogc3RyYXRlZ3lWYXJpYWRpYyxcbiAgICBtb25hZGljOiBzdHJhdGVneU1vbmFkaWMsXG59O1xuIl0sIm5hbWVzIjpbIm1lbW9pemUiLCJmbiIsIm9wdGlvbnMiLCJjYWNoZSIsImNhY2hlRGVmYXVsdCIsInNlcmlhbGl6ZXIiLCJzZXJpYWxpemVyRGVmYXVsdCIsInN0cmF0ZWd5Iiwic3RyYXRlZ3lEZWZhdWx0IiwiaXNQcmltaXRpdmUiLCJ2YWx1ZSIsIm1vbmFkaWMiLCJhcmciLCJjYWNoZUtleSIsImNvbXB1dGVkVmFsdWUiLCJnZXQiLCJjYWxsIiwic2V0IiwidmFyaWFkaWMiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImFyZ3VtZW50cyIsImFwcGx5IiwiYXNzZW1ibGUiLCJjb250ZXh0Iiwic2VyaWFsaXplIiwiYmluZCIsImxlbmd0aCIsImNyZWF0ZSIsInN0cmF0ZWd5VmFyaWFkaWMiLCJzdHJhdGVneU1vbmFkaWMiLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlIiwiT2JqZWN0Iiwia2V5Iiwic3RyYXRlZ2llcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/fast-memoize/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBestPattern: () => (/* binding */ getBestPattern)\n/* harmony export */ });\n/* harmony import */ var _time_data_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-data.generated */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\");\n\n/**\n * Returns the best matching date time pattern if a date time skeleton\n * pattern is provided with a locale. Follows the Unicode specification:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns\n * @param skeleton date time skeleton pattern that possibly includes j, J or C\n * @param locale\n */ function getBestPattern(skeleton, locale) {\n    var skeletonCopy = \"\";\n    for(var patternPos = 0; patternPos < skeleton.length; patternPos++){\n        var patternChar = skeleton.charAt(patternPos);\n        if (patternChar === \"j\") {\n            var extraLength = 0;\n            while(patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar){\n                extraLength++;\n                patternPos++;\n            }\n            var hourLen = 1 + (extraLength & 1);\n            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);\n            var dayPeriodChar = \"a\";\n            var hourChar = getDefaultHourSymbolFromLocale(locale);\n            if (hourChar == \"H\" || hourChar == \"k\") {\n                dayPeriodLen = 0;\n            }\n            while(dayPeriodLen-- > 0){\n                skeletonCopy += dayPeriodChar;\n            }\n            while(hourLen-- > 0){\n                skeletonCopy = hourChar + skeletonCopy;\n            }\n        } else if (patternChar === \"J\") {\n            skeletonCopy += \"H\";\n        } else {\n            skeletonCopy += patternChar;\n        }\n    }\n    return skeletonCopy;\n}\n/**\n * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n * of the given `locale` to the corresponding time pattern.\n * @param locale\n */ function getDefaultHourSymbolFromLocale(locale) {\n    var hourCycle = locale.hourCycle;\n    if (hourCycle === undefined && // @ts-ignore hourCycle(s) is not identified yet\n    locale.hourCycles && // @ts-ignore\n    locale.hourCycles.length) {\n        // @ts-ignore\n        hourCycle = locale.hourCycles[0];\n    }\n    if (hourCycle) {\n        switch(hourCycle){\n            case \"h24\":\n                return \"k\";\n            case \"h23\":\n                return \"H\";\n            case \"h12\":\n                return \"h\";\n            case \"h11\":\n                return \"K\";\n            default:\n                throw new Error(\"Invalid hourCycle\");\n        }\n    }\n    // TODO: Once hourCycle is fully supported remove the following with data generation\n    var languageTag = locale.language;\n    var regionTag;\n    if (languageTag !== \"root\") {\n        regionTag = locale.maximize().region;\n    }\n    var hourCycles = _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[regionTag || \"\"] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[languageTag || \"\"] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"\".concat(languageTag, \"-001\")] || _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[\"001\"];\n    return hourCycles[0];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZGF0ZS10aW1lLXBhdHRlcm4tZ2VuZXJhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQ2pEOzs7Ozs7Q0FNQyxHQUNNLFNBQVNDLGVBQWVDLFFBQVEsRUFBRUMsTUFBTTtJQUMzQyxJQUFJQyxlQUFlO0lBQ25CLElBQUssSUFBSUMsYUFBYSxHQUFHQSxhQUFhSCxTQUFTSSxNQUFNLEVBQUVELGFBQWM7UUFDakUsSUFBSUUsY0FBY0wsU0FBU00sTUFBTSxDQUFDSDtRQUNsQyxJQUFJRSxnQkFBZ0IsS0FBSztZQUNyQixJQUFJRSxjQUFjO1lBQ2xCLE1BQU9KLGFBQWEsSUFBSUgsU0FBU0ksTUFBTSxJQUNuQ0osU0FBU00sTUFBTSxDQUFDSCxhQUFhLE9BQU9FLFlBQWE7Z0JBQ2pERTtnQkFDQUo7WUFDSjtZQUNBLElBQUlLLFVBQVUsSUFBS0QsQ0FBQUEsY0FBYztZQUNqQyxJQUFJRSxlQUFlRixjQUFjLElBQUksSUFBSSxJQUFLQSxDQUFBQSxlQUFlO1lBQzdELElBQUlHLGdCQUFnQjtZQUNwQixJQUFJQyxXQUFXQywrQkFBK0JYO1lBQzlDLElBQUlVLFlBQVksT0FBT0EsWUFBWSxLQUFLO2dCQUNwQ0YsZUFBZTtZQUNuQjtZQUNBLE1BQU9BLGlCQUFpQixFQUFHO2dCQUN2QlAsZ0JBQWdCUTtZQUNwQjtZQUNBLE1BQU9GLFlBQVksRUFBRztnQkFDbEJOLGVBQWVTLFdBQVdUO1lBQzlCO1FBQ0osT0FDSyxJQUFJRyxnQkFBZ0IsS0FBSztZQUMxQkgsZ0JBQWdCO1FBQ3BCLE9BQ0s7WUFDREEsZ0JBQWdCRztRQUNwQjtJQUNKO0lBQ0EsT0FBT0g7QUFDWDtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTVSwrQkFBK0JYLE1BQU07SUFDMUMsSUFBSVksWUFBWVosT0FBT1ksU0FBUztJQUNoQyxJQUFJQSxjQUFjQyxhQUNkLGdEQUFnRDtJQUNoRGIsT0FBT2MsVUFBVSxJQUNqQixhQUFhO0lBQ2JkLE9BQU9jLFVBQVUsQ0FBQ1gsTUFBTSxFQUFFO1FBQzFCLGFBQWE7UUFDYlMsWUFBWVosT0FBT2MsVUFBVSxDQUFDLEVBQUU7SUFDcEM7SUFDQSxJQUFJRixXQUFXO1FBQ1gsT0FBUUE7WUFDSixLQUFLO2dCQUNELE9BQU87WUFDWCxLQUFLO2dCQUNELE9BQU87WUFDWCxLQUFLO2dCQUNELE9BQU87WUFDWCxLQUFLO2dCQUNELE9BQU87WUFDWDtnQkFDSSxNQUFNLElBQUlHLE1BQU07UUFDeEI7SUFDSjtJQUNBLG9GQUFvRjtJQUNwRixJQUFJQyxjQUFjaEIsT0FBT2lCLFFBQVE7SUFDakMsSUFBSUM7SUFDSixJQUFJRixnQkFBZ0IsUUFBUTtRQUN4QkUsWUFBWWxCLE9BQU9tQixRQUFRLEdBQUdDLE1BQU07SUFDeEM7SUFDQSxJQUFJTixhQUFhakIsMERBQVEsQ0FBQ3FCLGFBQWEsR0FBRyxJQUN0Q3JCLDBEQUFRLENBQUNtQixlQUFlLEdBQUcsSUFDM0JuQiwwREFBUSxDQUFDLEdBQUd3QixNQUFNLENBQUNMLGFBQWEsUUFBUSxJQUN4Q25CLDBEQUFRLENBQUMsTUFBTTtJQUNuQixPQUFPaUIsVUFBVSxDQUFDLEVBQUU7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZWVkLXNob3AvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZGF0ZS10aW1lLXBhdHRlcm4tZ2VuZXJhdG9yLmpzP2Y3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGltZURhdGEgfSBmcm9tICcuL3RpbWUtZGF0YS5nZW5lcmF0ZWQnO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBiZXN0IG1hdGNoaW5nIGRhdGUgdGltZSBwYXR0ZXJuIGlmIGEgZGF0ZSB0aW1lIHNrZWxldG9uXG4gKiBwYXR0ZXJuIGlzIHByb3ZpZGVkIHdpdGggYSBsb2NhbGUuIEZvbGxvd3MgdGhlIFVuaWNvZGUgc3BlY2lmaWNhdGlvbjpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjdGFibGUtbWFwcGluZy1yZXF1ZXN0ZWQtdGltZS1za2VsZXRvbnMtdG8tcGF0dGVybnNcbiAqIEBwYXJhbSBza2VsZXRvbiBkYXRlIHRpbWUgc2tlbGV0b24gcGF0dGVybiB0aGF0IHBvc3NpYmx5IGluY2x1ZGVzIGosIEogb3IgQ1xuICogQHBhcmFtIGxvY2FsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdFBhdHRlcm4oc2tlbGV0b24sIGxvY2FsZSkge1xuICAgIHZhciBza2VsZXRvbkNvcHkgPSAnJztcbiAgICBmb3IgKHZhciBwYXR0ZXJuUG9zID0gMDsgcGF0dGVyblBvcyA8IHNrZWxldG9uLmxlbmd0aDsgcGF0dGVyblBvcysrKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuQ2hhciA9IHNrZWxldG9uLmNoYXJBdChwYXR0ZXJuUG9zKTtcbiAgICAgICAgaWYgKHBhdHRlcm5DaGFyID09PSAnaicpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUxlbmd0aCA9IDA7XG4gICAgICAgICAgICB3aGlsZSAocGF0dGVyblBvcyArIDEgPCBza2VsZXRvbi5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBza2VsZXRvbi5jaGFyQXQocGF0dGVyblBvcyArIDEpID09PSBwYXR0ZXJuQ2hhcikge1xuICAgICAgICAgICAgICAgIGV4dHJhTGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgcGF0dGVyblBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhvdXJMZW4gPSAxICsgKGV4dHJhTGVuZ3RoICYgMSk7XG4gICAgICAgICAgICB2YXIgZGF5UGVyaW9kTGVuID0gZXh0cmFMZW5ndGggPCAyID8gMSA6IDMgKyAoZXh0cmFMZW5ndGggPj4gMSk7XG4gICAgICAgICAgICB2YXIgZGF5UGVyaW9kQ2hhciA9ICdhJztcbiAgICAgICAgICAgIHZhciBob3VyQ2hhciA9IGdldERlZmF1bHRIb3VyU3ltYm9sRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgICAgICAgICAgaWYgKGhvdXJDaGFyID09ICdIJyB8fCBob3VyQ2hhciA9PSAnaycpIHtcbiAgICAgICAgICAgICAgICBkYXlQZXJpb2RMZW4gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGRheVBlcmlvZExlbi0tID4gMCkge1xuICAgICAgICAgICAgICAgIHNrZWxldG9uQ29weSArPSBkYXlQZXJpb2RDaGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGhvdXJMZW4tLSA+IDApIHtcbiAgICAgICAgICAgICAgICBza2VsZXRvbkNvcHkgPSBob3VyQ2hhciArIHNrZWxldG9uQ29weTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXR0ZXJuQ2hhciA9PT0gJ0onKSB7XG4gICAgICAgICAgICBza2VsZXRvbkNvcHkgKz0gJ0gnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2tlbGV0b25Db3B5ICs9IHBhdHRlcm5DaGFyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBza2VsZXRvbkNvcHk7XG59XG4vKipcbiAqIE1hcHMgdGhlIFtob3VyIGN5Y2xlIHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0ludGwvTG9jYWxlL2hvdXJDeWNsZSlcbiAqIG9mIHRoZSBnaXZlbiBgbG9jYWxlYCB0byB0aGUgY29ycmVzcG9uZGluZyB0aW1lIHBhdHRlcm4uXG4gKiBAcGFyYW0gbG9jYWxlXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRIb3VyU3ltYm9sRnJvbUxvY2FsZShsb2NhbGUpIHtcbiAgICB2YXIgaG91ckN5Y2xlID0gbG9jYWxlLmhvdXJDeWNsZTtcbiAgICBpZiAoaG91ckN5Y2xlID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBob3VyQ3ljbGUocykgaXMgbm90IGlkZW50aWZpZWQgeWV0XG4gICAgICAgIGxvY2FsZS5ob3VyQ3ljbGVzICYmXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbG9jYWxlLmhvdXJDeWNsZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaG91ckN5Y2xlID0gbG9jYWxlLmhvdXJDeWNsZXNbMF07XG4gICAgfVxuICAgIGlmIChob3VyQ3ljbGUpIHtcbiAgICAgICAgc3dpdGNoIChob3VyQ3ljbGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2gyNCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdrJztcbiAgICAgICAgICAgIGNhc2UgJ2gyMyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdIJztcbiAgICAgICAgICAgIGNhc2UgJ2gxMic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoJztcbiAgICAgICAgICAgIGNhc2UgJ2gxMSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdLJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhvdXJDeWNsZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRPRE86IE9uY2UgaG91ckN5Y2xlIGlzIGZ1bGx5IHN1cHBvcnRlZCByZW1vdmUgdGhlIGZvbGxvd2luZyB3aXRoIGRhdGEgZ2VuZXJhdGlvblxuICAgIHZhciBsYW5ndWFnZVRhZyA9IGxvY2FsZS5sYW5ndWFnZTtcbiAgICB2YXIgcmVnaW9uVGFnO1xuICAgIGlmIChsYW5ndWFnZVRhZyAhPT0gJ3Jvb3QnKSB7XG4gICAgICAgIHJlZ2lvblRhZyA9IGxvY2FsZS5tYXhpbWl6ZSgpLnJlZ2lvbjtcbiAgICB9XG4gICAgdmFyIGhvdXJDeWNsZXMgPSB0aW1lRGF0YVtyZWdpb25UYWcgfHwgJyddIHx8XG4gICAgICAgIHRpbWVEYXRhW2xhbmd1YWdlVGFnIHx8ICcnXSB8fFxuICAgICAgICB0aW1lRGF0YVtcIlwiLmNvbmNhdChsYW5ndWFnZVRhZywgXCItMDAxXCIpXSB8fFxuICAgICAgICB0aW1lRGF0YVsnMDAxJ107XG4gICAgcmV0dXJuIGhvdXJDeWNsZXNbMF07XG59XG4iXSwibmFtZXMiOlsidGltZURhdGEiLCJnZXRCZXN0UGF0dGVybiIsInNrZWxldG9uIiwibG9jYWxlIiwic2tlbGV0b25Db3B5IiwicGF0dGVyblBvcyIsImxlbmd0aCIsInBhdHRlcm5DaGFyIiwiY2hhckF0IiwiZXh0cmFMZW5ndGgiLCJob3VyTGVuIiwiZGF5UGVyaW9kTGVuIiwiZGF5UGVyaW9kQ2hhciIsImhvdXJDaGFyIiwiZ2V0RGVmYXVsdEhvdXJTeW1ib2xGcm9tTG9jYWxlIiwiaG91ckN5Y2xlIiwidW5kZWZpbmVkIiwiaG91ckN5Y2xlcyIsIkVycm9yIiwibGFuZ3VhZ2VUYWciLCJsYW5ndWFnZSIsInJlZ2lvblRhZyIsIm1heGltaXplIiwicmVnaW9uIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/error.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorKind: () => (/* binding */ ErrorKind)\n/* harmony export */ });\nvar ErrorKind;\n(function(ErrorKind) {\n    /** Argument is unclosed (e.g. `{0`) */ ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n    /** Argument is empty (e.g. `{}`). */ ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n    /** Argument is malformed (e.g. `{foo!}``) */ ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n    /** Expect an argument type (e.g. `{foo,}`) */ ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n    /** Unsupported argument type (e.g. `{foo,foo}`) */ ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n    /** Expect an argument style (e.g. `{foo, number, }`) */ ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n    /** The number skeleton is invalid. */ ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n    /** The date time skeleton is invalid. */ ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */ ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */ ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */ ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n    /** Missing select argument options (e.g. `{foo, select}`) */ ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */ ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */ ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */ ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */ ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */ ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n    /**\n     * Expecting a message fragment after the `plural` or `selectordinal` selector\n     * (e.g. `{foo, plural, one}`)\n     */ ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */ ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n    /**\n     * Duplicate selectors in `plural` or `selectordinal` argument.\n     * (e.g. {foo, plural, one {#} one {#}})\n     */ ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n    /** Duplicate selectors in `select` argument.\n     * (e.g. {foo, select, apple {apple} apple {apple}})\n     */ ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n    /** Plural or select argument option must have `other` clause. */ ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */ ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n    /** The tag name is invalid. (e.g. `<123>foo</123>`) */ ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */ ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */ ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLElBQUlBLFVBQVU7QUFDcEIsVUFBVUEsU0FBUztJQUNoQixxQ0FBcUMsR0FDckNBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGdDQUFnQyxHQUFHLEVBQUUsR0FBRztJQUM1RCxtQ0FBbUMsR0FDbkNBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsR0FBRztJQUM3QywyQ0FBMkMsR0FDM0NBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHFCQUFxQixHQUFHLEVBQUUsR0FBRztJQUNqRCw0Q0FBNEMsR0FDNUNBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHVCQUF1QixHQUFHLEVBQUUsR0FBRztJQUNuRCxpREFBaUQsR0FDakRBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHdCQUF3QixHQUFHLEVBQUUsR0FBRztJQUNwRCxzREFBc0QsR0FDdERBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHdCQUF3QixHQUFHLEVBQUUsR0FBRztJQUNwRCxvQ0FBb0MsR0FDcENBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLDBCQUEwQixHQUFHLEVBQUUsR0FBRztJQUN0RCx1Q0FBdUMsR0FDdkNBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLDZCQUE2QixHQUFHLEVBQUUsR0FBRztJQUN6RCwyRUFBMkUsR0FDM0VBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHlCQUF5QixHQUFHLEVBQUUsR0FBRztJQUNyRCw0RUFBNEUsR0FDNUVBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLDRCQUE0QixHQUFHLEdBQUcsR0FBRztJQUN6RCw2RUFBNkUsR0FDN0VBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLG1DQUFtQyxHQUFHLEdBQUcsR0FBRztJQUNoRSwyREFBMkQsR0FDM0RBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGlDQUFpQyxHQUFHLEdBQUcsR0FBRztJQUM5RCxvR0FBb0csR0FDcEdBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHNDQUFzQyxHQUFHLEdBQUcsR0FBRztJQUNuRSw2RkFBNkYsR0FDN0ZBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHVDQUF1QyxHQUFHLEdBQUcsR0FBRztJQUNwRSxvRUFBb0UsR0FDcEVBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGtDQUFrQyxHQUFHLEdBQUcsR0FBRztJQUMvRCx1RkFBdUYsR0FDdkZBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGtDQUFrQyxHQUFHLEdBQUcsR0FBRztJQUMvRCwyRkFBMkYsR0FDM0ZBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLDJDQUEyQyxHQUFHLEdBQUcsR0FBRztJQUN4RTs7O0tBR0MsR0FDREEsU0FBUyxDQUFDQSxTQUFTLENBQUMsMkNBQTJDLEdBQUcsR0FBRyxHQUFHO0lBQ3hFLHdGQUF3RixHQUN4RkEsU0FBUyxDQUFDQSxTQUFTLENBQUMsbUNBQW1DLEdBQUcsR0FBRyxHQUFHO0lBQ2hFOzs7S0FHQyxHQUNEQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxxQ0FBcUMsR0FBRyxHQUFHLEdBQUc7SUFDbEU7O0tBRUMsR0FDREEsU0FBUyxDQUFDQSxTQUFTLENBQUMscUNBQXFDLEdBQUcsR0FBRyxHQUFHO0lBQ2xFLCtEQUErRCxHQUMvREEsU0FBUyxDQUFDQSxTQUFTLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxHQUFHO0lBQ3BELHFEQUFxRCxHQUNyREEsU0FBUyxDQUFDQSxTQUFTLENBQUMsY0FBYyxHQUFHLEdBQUcsR0FBRztJQUMzQyxxREFBcUQsR0FDckRBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLG1CQUFtQixHQUFHLEdBQUcsR0FBRztJQUNoRCxnRkFBZ0YsR0FDaEZBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHdCQUF3QixHQUFHLEdBQUcsR0FBRztJQUNyRCxrRUFBa0UsR0FDbEVBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGVBQWUsR0FBRyxHQUFHLEdBQUc7QUFDaEQsR0FBR0EsYUFBY0EsQ0FBQUEsWUFBWSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VlZC1zaG9wLy4vbm9kZV9tb2R1bGVzL0Bmb3JtYXRqcy9pY3UtbWVzc2FnZWZvcm1hdC1wYXJzZXIvbGliL2Vycm9yLmpzPzhhOGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBFcnJvcktpbmQ7XG4oZnVuY3Rpb24gKEVycm9yS2luZCkge1xuICAgIC8qKiBBcmd1bWVudCBpcyB1bmNsb3NlZCAoZS5nLiBgezBgKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJFWFBFQ1RfQVJHVU1FTlRfQ0xPU0lOR19CUkFDRVwiXSA9IDFdID0gXCJFWFBFQ1RfQVJHVU1FTlRfQ0xPU0lOR19CUkFDRVwiO1xuICAgIC8qKiBBcmd1bWVudCBpcyBlbXB0eSAoZS5nLiBge31gKS4gKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRU1QVFlfQVJHVU1FTlRcIl0gPSAyXSA9IFwiRU1QVFlfQVJHVU1FTlRcIjtcbiAgICAvKiogQXJndW1lbnQgaXMgbWFsZm9ybWVkIChlLmcuIGB7Zm9vIX1gYCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiTUFMRk9STUVEX0FSR1VNRU5UXCJdID0gM10gPSBcIk1BTEZPUk1FRF9BUkdVTUVOVFwiO1xuICAgIC8qKiBFeHBlY3QgYW4gYXJndW1lbnQgdHlwZSAoZS5nLiBge2Zvbyx9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX0FSR1VNRU5UX1RZUEVcIl0gPSA0XSA9IFwiRVhQRUNUX0FSR1VNRU5UX1RZUEVcIjtcbiAgICAvKiogVW5zdXBwb3J0ZWQgYXJndW1lbnQgdHlwZSAoZS5nLiBge2Zvbyxmb299YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiSU5WQUxJRF9BUkdVTUVOVF9UWVBFXCJdID0gNV0gPSBcIklOVkFMSURfQVJHVU1FTlRfVFlQRVwiO1xuICAgIC8qKiBFeHBlY3QgYW4gYXJndW1lbnQgc3R5bGUgKGUuZy4gYHtmb28sIG51bWJlciwgfWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9BUkdVTUVOVF9TVFlMRVwiXSA9IDZdID0gXCJFWFBFQ1RfQVJHVU1FTlRfU1RZTEVcIjtcbiAgICAvKiogVGhlIG51bWJlciBza2VsZXRvbiBpcyBpbnZhbGlkLiAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJJTlZBTElEX05VTUJFUl9TS0VMRVRPTlwiXSA9IDddID0gXCJJTlZBTElEX05VTUJFUl9TS0VMRVRPTlwiO1xuICAgIC8qKiBUaGUgZGF0ZSB0aW1lIHNrZWxldG9uIGlzIGludmFsaWQuICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIklOVkFMSURfREFURV9USU1FX1NLRUxFVE9OXCJdID0gOF0gPSBcIklOVkFMSURfREFURV9USU1FX1NLRUxFVE9OXCI7XG4gICAgLyoqIEV4ZXBjdCBhIG51bWJlciBza2VsZXRvbiBmb2xsb3dpbmcgdGhlIGA6OmAgKGUuZy4gYHtmb28sIG51bWJlciwgOjp9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX05VTUJFUl9TS0VMRVRPTlwiXSA9IDldID0gXCJFWFBFQ1RfTlVNQkVSX1NLRUxFVE9OXCI7XG4gICAgLyoqIEV4ZXBjdCBhIGRhdGUgdGltZSBza2VsZXRvbiBmb2xsb3dpbmcgdGhlIGA6OmAgKGUuZy4gYHtmb28sIGRhdGUsIDo6fWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9EQVRFX1RJTUVfU0tFTEVUT05cIl0gPSAxMF0gPSBcIkVYUEVDVF9EQVRFX1RJTUVfU0tFTEVUT05cIjtcbiAgICAvKiogVW5tYXRjaGVkIGFwb3N0cm9waGVzIGluIHRoZSBhcmd1bWVudCBzdHlsZSAoZS5nLiBge2ZvbywgbnVtYmVyLCAndGVzdGApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIlVOQ0xPU0VEX1FVT1RFX0lOX0FSR1VNRU5UX1NUWUxFXCJdID0gMTFdID0gXCJVTkNMT1NFRF9RVU9URV9JTl9BUkdVTUVOVF9TVFlMRVwiO1xuICAgIC8qKiBNaXNzaW5nIHNlbGVjdCBhcmd1bWVudCBvcHRpb25zIChlLmcuIGB7Zm9vLCBzZWxlY3R9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX1NFTEVDVF9BUkdVTUVOVF9PUFRJT05TXCJdID0gMTJdID0gXCJFWFBFQ1RfU0VMRUNUX0FSR1VNRU5UX09QVElPTlNcIjtcbiAgICAvKiogRXhwZWN0aW5nIGFuIG9mZnNldCB2YWx1ZSBpbiBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgYXJndW1lbnQgKGUuZyBge2ZvbywgcGx1cmFsLCBvZmZzZXR9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUVcIl0gPSAxM10gPSBcIkVYUEVDVF9QTFVSQUxfQVJHVU1FTlRfT0ZGU0VUX1ZBTFVFXCI7XG4gICAgLyoqIE9mZnNldCB2YWx1ZSBpbiBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgaXMgaW52YWxpZCAoZS5nLiBge2ZvbywgcGx1cmFsLCBvZmZzZXQ6IHh9YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiSU5WQUxJRF9QTFVSQUxfQVJHVU1FTlRfT0ZGU0VUX1ZBTFVFXCJdID0gMTRdID0gXCJJTlZBTElEX1BMVVJBTF9BUkdVTUVOVF9PRkZTRVRfVkFMVUVcIjtcbiAgICAvKiogRXhwZWN0aW5nIGEgc2VsZWN0b3IgaW4gYHNlbGVjdGAgYXJndW1lbnQgKGUuZyBge2Zvbywgc2VsZWN0fWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIl0gPSAxNV0gPSBcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKiogRXhwZWN0aW5nIGEgc2VsZWN0b3IgaW4gYHBsdXJhbGAgb3IgYHNlbGVjdG9yZGluYWxgIGFyZ3VtZW50IChlLmcgYHtmb28sIHBsdXJhbH1gKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJFWFBFQ1RfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SXCJdID0gMTZdID0gXCJFWFBFQ1RfUExVUkFMX0FSR1VNRU5UX1NFTEVDVE9SXCI7XG4gICAgLyoqIEV4cGVjdGluZyBhIG1lc3NhZ2UgZnJhZ21lbnQgYWZ0ZXIgdGhlIGBzZWxlY3RgIHNlbGVjdG9yIChlLmcuIGB7Zm9vLCBzZWxlY3QsIGFwcGxlfWApICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JfRlJBR01FTlRcIl0gPSAxN10gPSBcIkVYUEVDVF9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JfRlJBR01FTlRcIjtcbiAgICAvKipcbiAgICAgKiBFeHBlY3RpbmcgYSBtZXNzYWdlIGZyYWdtZW50IGFmdGVyIHRoZSBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgc2VsZWN0b3JcbiAgICAgKiAoZS5nLiBge2ZvbywgcGx1cmFsLCBvbmV9YClcbiAgICAgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUl9GUkFHTUVOVFwiXSA9IDE4XSA9IFwiRVhQRUNUX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUl9GUkFHTUVOVFwiO1xuICAgIC8qKiBTZWxlY3RvciBpbiBgcGx1cmFsYCBvciBgc2VsZWN0b3JkaW5hbGAgaXMgbWFsZm9ybWVkIChlLmcuIGB7Zm9vLCBwbHVyYWwsID14IHsjfX1gKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJJTlZBTElEX1BMVVJBTF9BUkdVTUVOVF9TRUxFQ1RPUlwiXSA9IDE5XSA9IFwiSU5WQUxJRF9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKipcbiAgICAgKiBEdXBsaWNhdGUgc2VsZWN0b3JzIGluIGBwbHVyYWxgIG9yIGBzZWxlY3RvcmRpbmFsYCBhcmd1bWVudC5cbiAgICAgKiAoZS5nLiB7Zm9vLCBwbHVyYWwsIG9uZSB7I30gb25lIHsjfX0pXG4gICAgICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkRVUExJQ0FURV9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JcIl0gPSAyMF0gPSBcIkRVUExJQ0FURV9QTFVSQUxfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKiogRHVwbGljYXRlIHNlbGVjdG9ycyBpbiBgc2VsZWN0YCBhcmd1bWVudC5cbiAgICAgKiAoZS5nLiB7Zm9vLCBzZWxlY3QsIGFwcGxlIHthcHBsZX0gYXBwbGUge2FwcGxlfX0pXG4gICAgICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIkRVUExJQ0FURV9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIl0gPSAyMV0gPSBcIkRVUExJQ0FURV9TRUxFQ1RfQVJHVU1FTlRfU0VMRUNUT1JcIjtcbiAgICAvKiogUGx1cmFsIG9yIHNlbGVjdCBhcmd1bWVudCBvcHRpb24gbXVzdCBoYXZlIGBvdGhlcmAgY2xhdXNlLiAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJNSVNTSU5HX09USEVSX0NMQVVTRVwiXSA9IDIyXSA9IFwiTUlTU0lOR19PVEhFUl9DTEFVU0VcIjtcbiAgICAvKiogVGhlIHRhZyBpcyBtYWxmb3JtZWQuIChlLmcuIGA8Ym9sZCE+Zm9vPC9ib2xkIT4pICovXG4gICAgRXJyb3JLaW5kW0Vycm9yS2luZFtcIklOVkFMSURfVEFHXCJdID0gMjNdID0gXCJJTlZBTElEX1RBR1wiO1xuICAgIC8qKiBUaGUgdGFnIG5hbWUgaXMgaW52YWxpZC4gKGUuZy4gYDwxMjM+Zm9vPC8xMjM+YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiSU5WQUxJRF9UQUdfTkFNRVwiXSA9IDI1XSA9IFwiSU5WQUxJRF9UQUdfTkFNRVwiO1xuICAgIC8qKiBUaGUgY2xvc2luZyB0YWcgZG9lcyBub3QgbWF0Y2ggdGhlIG9wZW5pbmcgdGFnLiAoZS5nLiBgPGJvbGQ+Zm9vPC9pdGFsaWM+YCkgKi9cbiAgICBFcnJvcktpbmRbRXJyb3JLaW5kW1wiVU5NQVRDSEVEX0NMT1NJTkdfVEFHXCJdID0gMjZdID0gXCJVTk1BVENIRURfQ0xPU0lOR19UQUdcIjtcbiAgICAvKiogVGhlIG9wZW5pbmcgdGFnIGhhcyB1bm1hdGNoZWQgY2xvc2luZyB0YWcuIChlLmcuIGA8Ym9sZD5mb29gKSAqL1xuICAgIEVycm9yS2luZFtFcnJvcktpbmRbXCJVTkNMT1NFRF9UQUdcIl0gPSAyN10gPSBcIlVOQ0xPU0VEX1RBR1wiO1xufSkoRXJyb3JLaW5kIHx8IChFcnJvcktpbmQgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIkVycm9yS2luZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TYPE),\n/* harmony export */   createLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isArgumentElement),\n/* harmony export */   isDateElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement),\n/* harmony export */   isPoundElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPoundElement),\n/* harmony export */   isSelectElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement),\n/* harmony export */   isTagElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTagElement),\n/* harmony export */   isTimeElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n\n\n\n\nfunction pruneLocation(els) {\n    els.forEach(function(el) {\n        delete el.location;\n        if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement)(el)) {\n            for(var k in el.options){\n                delete el.options[k].location;\n                pruneLocation(el.options[k].value);\n            }\n        } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement)(el) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton)(el.style)) {\n            delete el.style.location;\n        } else if (((0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement)(el)) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton)(el.style)) {\n            delete el.style.location;\n        } else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isTagElement)(el)) {\n            pruneLocation(el.children);\n        }\n    });\n}\nfunction parse(message, opts) {\n    if (opts === void 0) {\n        opts = {};\n    }\n    opts = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n        shouldParseSkeletons: true,\n        requiresOtherClause: true\n    }, opts);\n    var result = new _parser__WEBPACK_IMPORTED_MODULE_1__.Parser(message, opts).parse();\n    if (result.err) {\n        var error = SyntaxError(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind[result.err.kind]);\n        // @ts-expect-error Assign to error object\n        error.location = result.err.location;\n        // @ts-expect-error Assign to error object\n        error.originalMessage = result.err.message;\n        throw error;\n    }\n    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n        pruneLocation(result.val);\n    }\n    return result.val;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDRztBQUNGO0FBQzZIO0FBQy9KLFNBQVNXLGNBQWNDLEdBQUc7SUFDdEJBLElBQUlDLE9BQU8sQ0FBQyxTQUFVQyxFQUFFO1FBQ3BCLE9BQU9BLEdBQUdDLFFBQVE7UUFDbEIsSUFBSVAsdURBQWVBLENBQUNNLE9BQU9QLHVEQUFlQSxDQUFDTyxLQUFLO1lBQzVDLElBQUssSUFBSUUsS0FBS0YsR0FBR0csT0FBTyxDQUFFO2dCQUN0QixPQUFPSCxHQUFHRyxPQUFPLENBQUNELEVBQUUsQ0FBQ0QsUUFBUTtnQkFDN0JKLGNBQWNHLEdBQUdHLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDRSxLQUFLO1lBQ3JDO1FBQ0osT0FDSyxJQUFJYix1REFBZUEsQ0FBQ1MsT0FBT1Isd0RBQWdCQSxDQUFDUSxHQUFHSyxLQUFLLEdBQUc7WUFDeEQsT0FBT0wsR0FBR0ssS0FBSyxDQUFDSixRQUFRO1FBQzVCLE9BQ0ssSUFBSSxDQUFDWixxREFBYUEsQ0FBQ1csT0FBT0oscURBQWFBLENBQUNJLEdBQUUsS0FDM0NWLDBEQUFrQkEsQ0FBQ1UsR0FBR0ssS0FBSyxHQUFHO1lBQzlCLE9BQU9MLEdBQUdLLEtBQUssQ0FBQ0osUUFBUTtRQUM1QixPQUNLLElBQUlOLG9EQUFZQSxDQUFDSyxLQUFLO1lBQ3ZCSCxjQUFjRyxHQUFHTSxRQUFRO1FBQzdCO0lBQ0o7QUFDSjtBQUNPLFNBQVNDLE1BQU1DLE9BQU8sRUFBRUMsSUFBSTtJQUMvQixJQUFJQSxTQUFTLEtBQUssR0FBRztRQUFFQSxPQUFPLENBQUM7SUFBRztJQUNsQ0EsT0FBT3ZCLCtDQUFRQSxDQUFDO1FBQUV3QixzQkFBc0I7UUFBTUMscUJBQXFCO0lBQUssR0FBR0Y7SUFDM0UsSUFBSUcsU0FBUyxJQUFJeEIsMkNBQU1BLENBQUNvQixTQUFTQyxNQUFNRixLQUFLO0lBQzVDLElBQUlLLE9BQU9DLEdBQUcsRUFBRTtRQUNaLElBQUlDLFFBQVFDLFlBQVk1Qiw2Q0FBUyxDQUFDeUIsT0FBT0MsR0FBRyxDQUFDRyxJQUFJLENBQUM7UUFDbEQsMENBQTBDO1FBQzFDRixNQUFNYixRQUFRLEdBQUdXLE9BQU9DLEdBQUcsQ0FBQ1osUUFBUTtRQUNwQywwQ0FBMEM7UUFDMUNhLE1BQU1HLGVBQWUsR0FBR0wsT0FBT0MsR0FBRyxDQUFDTCxPQUFPO1FBQzFDLE1BQU1NO0lBQ1Y7SUFDQSxJQUFJLENBQUVMLENBQUFBLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLUyxlQUFlLEdBQUc7UUFDckVyQixjQUFjZSxPQUFPTyxHQUFHO0lBQzVCO0lBQ0EsT0FBT1AsT0FBT08sR0FBRztBQUNyQjtBQUN3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NlZWQtc2hvcC8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9pbmRleC5qcz8zNjEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBFcnJvcktpbmQgfSBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCB7IGlzRGF0ZUVsZW1lbnQsIGlzRGF0ZVRpbWVTa2VsZXRvbiwgaXNOdW1iZXJFbGVtZW50LCBpc051bWJlclNrZWxldG9uLCBpc1BsdXJhbEVsZW1lbnQsIGlzU2VsZWN0RWxlbWVudCwgaXNUYWdFbGVtZW50LCBpc1RpbWVFbGVtZW50LCB9IGZyb20gJy4vdHlwZXMnO1xuZnVuY3Rpb24gcHJ1bmVMb2NhdGlvbihlbHMpIHtcbiAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZGVsZXRlIGVsLmxvY2F0aW9uO1xuICAgICAgICBpZiAoaXNTZWxlY3RFbGVtZW50KGVsKSB8fCBpc1BsdXJhbEVsZW1lbnQoZWwpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGVsLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZWwub3B0aW9uc1trXS5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgICBwcnVuZUxvY2F0aW9uKGVsLm9wdGlvbnNba10udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTnVtYmVyRWxlbWVudChlbCkgJiYgaXNOdW1iZXJTa2VsZXRvbihlbC5zdHlsZSkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBlbC5zdHlsZS5sb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoaXNEYXRlRWxlbWVudChlbCkgfHwgaXNUaW1lRWxlbWVudChlbCkpICYmXG4gICAgICAgICAgICBpc0RhdGVUaW1lU2tlbGV0b24oZWwuc3R5bGUpKSB7XG4gICAgICAgICAgICBkZWxldGUgZWwuc3R5bGUubG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNUYWdFbGVtZW50KGVsKSkge1xuICAgICAgICAgICAgcHJ1bmVMb2NhdGlvbihlbC5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShtZXNzYWdlLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICBvcHRzID0gX19hc3NpZ24oeyBzaG91bGRQYXJzZVNrZWxldG9uczogdHJ1ZSwgcmVxdWlyZXNPdGhlckNsYXVzZTogdHJ1ZSB9LCBvcHRzKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFBhcnNlcihtZXNzYWdlLCBvcHRzKS5wYXJzZSgpO1xuICAgIGlmIChyZXN1bHQuZXJyKSB7XG4gICAgICAgIHZhciBlcnJvciA9IFN5bnRheEVycm9yKEVycm9yS2luZFtyZXN1bHQuZXJyLmtpbmRdKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBBc3NpZ24gdG8gZXJyb3Igb2JqZWN0XG4gICAgICAgIGVycm9yLmxvY2F0aW9uID0gcmVzdWx0LmVyci5sb2NhdGlvbjtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBBc3NpZ24gdG8gZXJyb3Igb2JqZWN0XG4gICAgICAgIGVycm9yLm9yaWdpbmFsTWVzc2FnZSA9IHJlc3VsdC5lcnIubWVzc2FnZTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmICghKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5jYXB0dXJlTG9jYXRpb24pKSB7XG4gICAgICAgIHBydW5lTG9jYXRpb24ocmVzdWx0LnZhbCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQudmFsO1xufVxuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJFcnJvcktpbmQiLCJQYXJzZXIiLCJpc0RhdGVFbGVtZW50IiwiaXNEYXRlVGltZVNrZWxldG9uIiwiaXNOdW1iZXJFbGVtZW50IiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzUGx1cmFsRWxlbWVudCIsImlzU2VsZWN0RWxlbWVudCIsImlzVGFnRWxlbWVudCIsImlzVGltZUVsZW1lbnQiLCJwcnVuZUxvY2F0aW9uIiwiZWxzIiwiZm9yRWFjaCIsImVsIiwibG9jYXRpb24iLCJrIiwib3B0aW9ucyIsInZhbHVlIiwic3R5bGUiLCJjaGlsZHJlbiIsInBhcnNlIiwibWVzc2FnZSIsIm9wdHMiLCJzaG91bGRQYXJzZVNrZWxldG9ucyIsInJlcXVpcmVzT3RoZXJDbGF1c2UiLCJyZXN1bHQiLCJlcnIiLCJlcnJvciIsIlN5bnRheEVycm9yIiwia2luZCIsIm9yaWdpbmFsTWVzc2FnZSIsImNhcHR1cmVMb2NhdGlvbiIsInZhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regex.generated */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\");\n/* harmony import */ var _formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/icu-skeleton-parser */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\");\n/* harmony import */ var _date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-time-pattern-generator */ \"(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\");\nvar _a;\n\n\n\n\n\n\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*\"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(\"\".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, \"*$\"));\nfunction createLocation(start, end) {\n    return {\n        start: start,\n        end: end\n    };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith;\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;\n};\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n    var re = RE(\"([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)\", \"yu\");\n    /**\n     * legacy Edge or Xbox One browser\n     * Unicode flag support: supported\n     * Pattern_Syntax support: not supported\n     * See https://github.com/formatjs/formatjs/issues/2822\n     */ REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec(\"a\")) === null || _a === void 0 ? void 0 : _a[0]) === \"a\";\n} catch (_) {\n    REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith ? function startsWith(s, search, position) {\n    return s.startsWith(search, position);\n} : function startsWith(s, search, position) {\n    return s.slice(position, position + search.length) === search;\n};\nvar fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint() {\n    var codePoints = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        codePoints[_i] = arguments[_i];\n    }\n    var elements = \"\";\n    var length = codePoints.length;\n    var i = 0;\n    var code;\n    while(length > i){\n        code = codePoints[i++];\n        if (code > 0x10ffff) throw RangeError(code + \" is not a valid code point\");\n        elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);\n    }\n    return elements;\n};\nvar fromEntries = // native\nhasNativeFromEntries ? Object.fromEntries : function fromEntries(entries) {\n    var obj = {};\n    for(var _i = 0, entries_1 = entries; _i < entries_1.length; _i++){\n        var _a = entries_1[_i], k = _a[0], v = _a[1];\n        obj[k] = v;\n    }\n    return obj;\n};\nvar codePointAt = hasNativeCodePointAt ? function codePointAt(s, index) {\n    return s.codePointAt(index);\n} : function codePointAt(s, index) {\n    var size = s.length;\n    if (index < 0 || index >= size) {\n        return undefined;\n    }\n    var first = s.charCodeAt(index);\n    var second;\n    return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\nvar trimStart = hasTrimStart ? function trimStart(s) {\n    return s.trimStart();\n} : function trimStart(s) {\n    return s.replace(SPACE_SEPARATOR_START_REGEX, \"\");\n};\nvar trimEnd = hasTrimEnd ? function trimEnd(s) {\n    return s.trimEnd();\n} : function trimEnd(s) {\n    return s.replace(SPACE_SEPARATOR_END_REGEX, \"\");\n};\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n    return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n    // Native\n    var IDENTIFIER_PREFIX_RE_1 = RE(\"([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)\", \"yu\");\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var _a;\n        IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n        var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n        return (_a = match[1]) !== null && _a !== void 0 ? _a : \"\";\n    };\n} else {\n    // IE11\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var match = [];\n        while(true){\n            var c = codePointAt(s, index);\n            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n                break;\n            }\n            match.push(c);\n            index += c >= 0x10000 ? 2 : 1;\n        }\n        return fromCodePoint.apply(void 0, match);\n    };\n}\nvar Parser = /** @class */ function() {\n    function Parser(message, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.message = message;\n        this.position = {\n            offset: 0,\n            line: 1,\n            column: 1\n        };\n        this.ignoreTag = !!options.ignoreTag;\n        this.locale = options.locale;\n        this.requiresOtherClause = !!options.requiresOtherClause;\n        this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n    }\n    Parser.prototype.parse = function() {\n        if (this.offset() !== 0) {\n            throw Error(\"parser can only be used once\");\n        }\n        return this.parseMessage(0, \"\", false);\n    };\n    Parser.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {\n        var elements = [];\n        while(!this.isEOF()){\n            var char = this.char();\n            if (char === 123 /* `{` */ ) {\n                var result = this.parseArgument(nestingLevel, expectingCloseTag);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            } else if (char === 125 /* `}` */  && nestingLevel > 0) {\n                break;\n            } else if (char === 35 /* `#` */  && (parentArgType === \"plural\" || parentArgType === \"selectordinal\")) {\n                var position = this.clonePosition();\n                this.bump();\n                elements.push({\n                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.pound,\n                    location: createLocation(position, this.clonePosition())\n                });\n            } else if (char === 60 /* `<` */  && !this.ignoreTag && this.peek() === 47 // char code for '/'\n            ) {\n                if (expectingCloseTag) {\n                    break;\n                } else {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n                }\n            } else if (char === 60 /* `<` */  && !this.ignoreTag && _isAlpha(this.peek() || 0)) {\n                var result = this.parseTag(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            } else {\n                var result = this.parseLiteral(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n        }\n        return {\n            val: elements,\n            err: null\n        };\n    };\n    /**\n     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n     * are accepted:\n     *\n     * ```\n     * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n     * tagName ::= [a-z] (PENChar)*\n     * PENChar ::=\n     *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n     * ```\n     *\n     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n     * since other tag-based engines like React allow it\n     */ Parser.prototype.parseTag = function(nestingLevel, parentArgType) {\n        var startPosition = this.clonePosition();\n        this.bump(); // `<`\n        var tagName = this.parseTagName();\n        this.bumpSpace();\n        if (this.bumpIf(\"/>\")) {\n            // Self closing tag\n            return {\n                val: {\n                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n                    value: \"<\".concat(tagName, \"/>\"),\n                    location: createLocation(startPosition, this.clonePosition())\n                },\n                err: null\n            };\n        } else if (this.bumpIf(\">\")) {\n            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n            if (childrenResult.err) {\n                return childrenResult;\n            }\n            var children = childrenResult.val;\n            // Expecting a close tag\n            var endTagStartPosition = this.clonePosition();\n            if (this.bumpIf(\"</\")) {\n                if (this.isEOF() || !_isAlpha(this.char())) {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                var closingTagNameStartPosition = this.clonePosition();\n                var closingTagName = this.parseTagName();\n                if (tagName !== closingTagName) {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n                }\n                this.bumpSpace();\n                if (!this.bumpIf(\">\")) {\n                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                return {\n                    val: {\n                        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.tag,\n                        value: tagName,\n                        children: children,\n                        location: createLocation(startPosition, this.clonePosition())\n                    },\n                    err: null\n                };\n            } else {\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n            }\n        } else {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n        }\n    };\n    /**\n     * This method assumes that the caller has peeked ahead for the first tag character.\n     */ Parser.prototype.parseTagName = function() {\n        var startOffset = this.offset();\n        this.bump(); // the first tag name character\n        while(!this.isEOF() && _isPotentialElementNameChar(this.char())){\n            this.bump();\n        }\n        return this.message.slice(startOffset, this.offset());\n    };\n    Parser.prototype.parseLiteral = function(nestingLevel, parentArgType) {\n        var start = this.clonePosition();\n        var value = \"\";\n        while(true){\n            var parseQuoteResult = this.tryParseQuote(parentArgType);\n            if (parseQuoteResult) {\n                value += parseQuoteResult;\n                continue;\n            }\n            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n            if (parseUnquotedResult) {\n                value += parseUnquotedResult;\n                continue;\n            }\n            var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n            if (parseLeftAngleResult) {\n                value += parseLeftAngleResult;\n                continue;\n            }\n            break;\n        }\n        var location = createLocation(start, this.clonePosition());\n        return {\n            val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,\n                value: value,\n                location: location\n            },\n            err: null\n        };\n    };\n    Parser.prototype.tryParseLeftAngleBracket = function() {\n        if (!this.isEOF() && this.char() === 60 /* `<` */  && (this.ignoreTag || // If at the opening tag or closing tag position, bail.\n        !_isAlphaOrSlash(this.peek() || 0))) {\n            this.bump(); // `<`\n            return \"<\";\n        }\n        return null;\n    };\n    /**\n     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n     * a character that requires quoting (that is, \"only where needed\"), and works the same in\n     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n     */ Parser.prototype.tryParseQuote = function(parentArgType) {\n        if (this.isEOF() || this.char() !== 39 /* `'` */ ) {\n            return null;\n        }\n        // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n        // Check if is valid escaped character\n        switch(this.peek()){\n            case 39 /* `'` */ :\n                // double quote, should return as a single quote.\n                this.bump();\n                this.bump();\n                return \"'\";\n            // '{', '<', '>', '}'\n            case 123:\n            case 60:\n            case 62:\n            case 125:\n                break;\n            case 35:\n                if (parentArgType === \"plural\" || parentArgType === \"selectordinal\") {\n                    break;\n                }\n                return null;\n            default:\n                return null;\n        }\n        this.bump(); // apostrophe\n        var codePoints = [\n            this.char()\n        ]; // escaped char\n        this.bump();\n        // read chars until the optional closing apostrophe is found\n        while(!this.isEOF()){\n            var ch = this.char();\n            if (ch === 39 /* `'` */ ) {\n                if (this.peek() === 39 /* `'` */ ) {\n                    codePoints.push(39);\n                    // Bump one more time because we need to skip 2 characters.\n                    this.bump();\n                } else {\n                    // Optional closing apostrophe.\n                    this.bump();\n                    break;\n                }\n            } else {\n                codePoints.push(ch);\n            }\n            this.bump();\n        }\n        return fromCodePoint.apply(void 0, codePoints);\n    };\n    Parser.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {\n        if (this.isEOF()) {\n            return null;\n        }\n        var ch = this.char();\n        if (ch === 60 /* `<` */  || ch === 123 /* `{` */  || ch === 35 /* `#` */  && (parentArgType === \"plural\" || parentArgType === \"selectordinal\") || ch === 125 /* `}` */  && nestingLevel > 0) {\n            return null;\n        } else {\n            this.bump();\n            return fromCodePoint(ch);\n        }\n    };\n    Parser.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {\n        var openingBracePosition = this.clonePosition();\n        this.bump(); // `{`\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        if (this.char() === 125 /* `}` */ ) {\n            this.bump();\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        // argument name\n        var value = this.parseIdentifierIfPossible().value;\n        if (!value) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        switch(this.char()){\n            // Simple argument: `{name}`\n            case 125 /* `}` */ :\n                {\n                    this.bump(); // `}`\n                    return {\n                        val: {\n                            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.argument,\n                            // value does not include the opening and closing braces.\n                            value: value,\n                            location: createLocation(openingBracePosition, this.clonePosition())\n                        },\n                        err: null\n                    };\n                }\n            // Argument with options: `{name, format, ...}`\n            case 44 /* `,` */ :\n                {\n                    this.bump(); // `,`\n                    this.bumpSpace();\n                    if (this.isEOF()) {\n                        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n                    }\n                    return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n                }\n            default:\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n    };\n    /**\n     * Advance the parser until the end of the identifier, if it is currently on\n     * an identifier character. Return an empty string otherwise.\n     */ Parser.prototype.parseIdentifierIfPossible = function() {\n        var startingPosition = this.clonePosition();\n        var startOffset = this.offset();\n        var value = matchIdentifierAtIndex(this.message, startOffset);\n        var endOffset = startOffset + value.length;\n        this.bumpTo(endOffset);\n        var endPosition = this.clonePosition();\n        var location = createLocation(startingPosition, endPosition);\n        return {\n            value: value,\n            location: location\n        };\n    };\n    Parser.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {\n        var _a;\n        // Parse this range:\n        // {name, type, style}\n        //        ^---^\n        var typeStartPosition = this.clonePosition();\n        var argType = this.parseIdentifierIfPossible().value;\n        var typeEndPosition = this.clonePosition();\n        switch(argType){\n            case \"\":\n                // Expecting a style string number, date, time, plural, selectordinal, or select.\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n            case \"number\":\n            case \"date\":\n            case \"time\":\n                {\n                    // Parse this range:\n                    // {name, number, style}\n                    //              ^-------^\n                    this.bumpSpace();\n                    var styleAndLocation = null;\n                    if (this.bumpIf(\",\")) {\n                        this.bumpSpace();\n                        var styleStartPosition = this.clonePosition();\n                        var result = this.parseSimpleArgStyleIfPossible();\n                        if (result.err) {\n                            return result;\n                        }\n                        var style = trimEnd(result.val);\n                        if (style.length === 0) {\n                            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n                        }\n                        var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n                        styleAndLocation = {\n                            style: style,\n                            styleLocation: styleLocation\n                        };\n                    }\n                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                    if (argCloseResult.err) {\n                        return argCloseResult;\n                    }\n                    var location_1 = createLocation(openingBracePosition, this.clonePosition());\n                    // Extract style or skeleton\n                    if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, \"::\", 0)) {\n                        // Skeleton starts with `::`.\n                        var skeleton = trimStart(styleAndLocation.style.slice(2));\n                        if (argType === \"number\") {\n                            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n                            if (result.err) {\n                                return result;\n                            }\n                            return {\n                                val: {\n                                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number,\n                                    value: value,\n                                    location: location_1,\n                                    style: result.val\n                                },\n                                err: null\n                            };\n                        } else {\n                            if (skeleton.length === 0) {\n                                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n                            }\n                            var dateTimePattern = skeleton;\n                            // Get \"best match\" pattern only if locale is passed, if not, let it\n                            // pass as-is where `parseDateTimeSkeleton()` will throw an error\n                            // for unsupported patterns.\n                            if (this.locale) {\n                                dateTimePattern = (0,_date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__.getBestPattern)(skeleton, this.locale);\n                            }\n                            var style = {\n                                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.dateTime,\n                                pattern: dateTimePattern,\n                                location: styleAndLocation.styleLocation,\n                                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseDateTimeSkeleton)(dateTimePattern) : {}\n                            };\n                            var type = argType === \"date\" ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time;\n                            return {\n                                val: {\n                                    type: type,\n                                    value: value,\n                                    location: location_1,\n                                    style: style\n                                },\n                                err: null\n                            };\n                        }\n                    }\n                    // Regular style or no style.\n                    return {\n                        val: {\n                            type: argType === \"number\" ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number : argType === \"date\" ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time,\n                            value: value,\n                            location: location_1,\n                            style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null\n                        },\n                        err: null\n                    };\n                }\n            case \"plural\":\n            case \"selectordinal\":\n            case \"select\":\n                {\n                    // Parse this range:\n                    // {name, plural, options}\n                    //              ^---------^\n                    var typeEndPosition_1 = this.clonePosition();\n                    this.bumpSpace();\n                    if (!this.bumpIf(\",\")) {\n                        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, typeEndPosition_1)));\n                    }\n                    this.bumpSpace();\n                    // Parse offset:\n                    // {name, plural, offset:1, options}\n                    //                ^-----^\n                    //\n                    // or the first option:\n                    //\n                    // {name, plural, one {...} other {...}}\n                    //                ^--^\n                    var identifierAndLocation = this.parseIdentifierIfPossible();\n                    var pluralOffset = 0;\n                    if (argType !== \"select\" && identifierAndLocation.value === \"offset\") {\n                        if (!this.bumpIf(\":\")) {\n                            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n                        }\n                        this.bumpSpace();\n                        var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n                        if (result.err) {\n                            return result;\n                        }\n                        // Parse another identifier for option parsing\n                        this.bumpSpace();\n                        identifierAndLocation = this.parseIdentifierIfPossible();\n                        pluralOffset = result.val;\n                    }\n                    var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n                    if (optionsResult.err) {\n                        return optionsResult;\n                    }\n                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                    if (argCloseResult.err) {\n                        return argCloseResult;\n                    }\n                    var location_2 = createLocation(openingBracePosition, this.clonePosition());\n                    if (argType === \"select\") {\n                        return {\n                            val: {\n                                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.select,\n                                value: value,\n                                options: fromEntries(optionsResult.val),\n                                location: location_2\n                            },\n                            err: null\n                        };\n                    } else {\n                        return {\n                            val: {\n                                type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.plural,\n                                value: value,\n                                options: fromEntries(optionsResult.val),\n                                offset: pluralOffset,\n                                pluralType: argType === \"plural\" ? \"cardinal\" : \"ordinal\",\n                                location: location_2\n                            },\n                            err: null\n                        };\n                    }\n                }\n            default:\n                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n        }\n    };\n    Parser.prototype.tryParseArgumentClose = function(openingBracePosition) {\n        // Parse: {value, number, ::currency/GBP }\n        //\n        if (this.isEOF() || this.char() !== 125 /* `}` */ ) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bump(); // `}`\n        return {\n            val: true,\n            err: null\n        };\n    };\n    /**\n     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n     */ Parser.prototype.parseSimpleArgStyleIfPossible = function() {\n        var nestedBraces = 0;\n        var startPosition = this.clonePosition();\n        while(!this.isEOF()){\n            var ch = this.char();\n            switch(ch){\n                case 39 /* `'` */ :\n                    {\n                        // Treat apostrophe as quoting but include it in the style part.\n                        // Find the end of the quoted literal text.\n                        this.bump();\n                        var apostrophePosition = this.clonePosition();\n                        if (!this.bumpUntil(\"'\")) {\n                            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n                        }\n                        this.bump();\n                        break;\n                    }\n                case 123 /* `{` */ :\n                    {\n                        nestedBraces += 1;\n                        this.bump();\n                        break;\n                    }\n                case 125 /* `}` */ :\n                    {\n                        if (nestedBraces > 0) {\n                            nestedBraces -= 1;\n                        } else {\n                            return {\n                                val: this.message.slice(startPosition.offset, this.offset()),\n                                err: null\n                            };\n                        }\n                        break;\n                    }\n                default:\n                    this.bump();\n                    break;\n            }\n        }\n        return {\n            val: this.message.slice(startPosition.offset, this.offset()),\n            err: null\n        };\n    };\n    Parser.prototype.parseNumberSkeletonFromString = function(skeleton, location) {\n        var tokens = [];\n        try {\n            tokens = (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeletonFromString)(skeleton);\n        } catch (e) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_NUMBER_SKELETON, location);\n        }\n        return {\n            val: {\n                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.number,\n                tokens: tokens,\n                location: location,\n                parsedOptions: this.shouldParseSkeletons ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeleton)(tokens) : {}\n            },\n            err: null\n        };\n    };\n    /**\n     * @param nesting_level The current nesting level of messages.\n     *     This can be positive when parsing message fragment in select or plural argument options.\n     * @param parent_arg_type The parent argument's type.\n     * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n     *     the argument. It is a by-product of a previous parsing attempt.\n     * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n     *     between a pair of opening and closing tags. The nested message will not parse beyond\n     *     the closing tag boundary.\n     */ Parser.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n        var _a;\n        var hasOtherClause = false;\n        var options = [];\n        var parsedSelectors = new Set();\n        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;\n        // Parse:\n        // one {one apple}\n        // ^--^\n        while(true){\n            if (selector.length === 0) {\n                var startPosition = this.clonePosition();\n                if (parentArgType !== \"select\" && this.bumpIf(\"=\")) {\n                    // Try parse `={number}` selector\n                    var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n                    if (result.err) {\n                        return result;\n                    }\n                    selectorLocation = createLocation(startPosition, this.clonePosition());\n                    selector = this.message.slice(startPosition.offset, this.offset());\n                } else {\n                    break;\n                }\n            }\n            // Duplicate selector clauses\n            if (parsedSelectors.has(selector)) {\n                return this.error(parentArgType === \"select\" ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n            }\n            if (selector === \"other\") {\n                hasOtherClause = true;\n            }\n            // Parse:\n            // one {one apple}\n            //     ^----------^\n            this.bumpSpace();\n            var openingBracePosition = this.clonePosition();\n            if (!this.bumpIf(\"{\")) {\n                return this.error(parentArgType === \"select\" ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n            if (fragmentResult.err) {\n                return fragmentResult;\n            }\n            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n            if (argCloseResult.err) {\n                return argCloseResult;\n            }\n            options.push([\n                selector,\n                {\n                    value: fragmentResult.val,\n                    location: createLocation(openingBracePosition, this.clonePosition())\n                }\n            ]);\n            // Keep track of the existing selectors\n            parsedSelectors.add(selector);\n            // Prep next selector clause.\n            this.bumpSpace();\n            _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;\n        }\n        if (options.length === 0) {\n            return this.error(parentArgType === \"select\" ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        if (this.requiresOtherClause && !hasOtherClause) {\n            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        return {\n            val: options,\n            err: null\n        };\n    };\n    Parser.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {\n        var sign = 1;\n        var startingPosition = this.clonePosition();\n        if (this.bumpIf(\"+\")) {} else if (this.bumpIf(\"-\")) {\n            sign = -1;\n        }\n        var hasDigits = false;\n        var decimal = 0;\n        while(!this.isEOF()){\n            var ch = this.char();\n            if (ch >= 48 /* `0` */  && ch <= 57 /* `9` */ ) {\n                hasDigits = true;\n                decimal = decimal * 10 + (ch - 48);\n                this.bump();\n            } else {\n                break;\n            }\n        }\n        var location = createLocation(startingPosition, this.clonePosition());\n        if (!hasDigits) {\n            return this.error(expectNumberError, location);\n        }\n        decimal *= sign;\n        if (!isSafeInteger(decimal)) {\n            return this.error(invalidNumberError, location);\n        }\n        return {\n            val: decimal,\n            err: null\n        };\n    };\n    Parser.prototype.offset = function() {\n        return this.position.offset;\n    };\n    Parser.prototype.isEOF = function() {\n        return this.offset() === this.message.length;\n    };\n    Parser.prototype.clonePosition = function() {\n        // This is much faster than `Object.assign` or spread.\n        return {\n            offset: this.position.offset,\n            line: this.position.line,\n            column: this.position.column\n        };\n    };\n    /**\n     * Return the code point at the current position of the parser.\n     * Throws if the index is out of bound.\n     */ Parser.prototype.char = function() {\n        var offset = this.position.offset;\n        if (offset >= this.message.length) {\n            throw Error(\"out of bound\");\n        }\n        var code = codePointAt(this.message, offset);\n        if (code === undefined) {\n            throw Error(\"Offset \".concat(offset, \" is at invalid UTF-16 code unit boundary\"));\n        }\n        return code;\n    };\n    Parser.prototype.error = function(kind, location) {\n        return {\n            val: null,\n            err: {\n                kind: kind,\n                message: this.message,\n                location: location\n            }\n        };\n    };\n    /** Bump the parser to the next UTF-16 code unit. */ Parser.prototype.bump = function() {\n        if (this.isEOF()) {\n            return;\n        }\n        var code = this.char();\n        if (code === 10 /* '\\n' */ ) {\n            this.position.line += 1;\n            this.position.column = 1;\n            this.position.offset += 1;\n        } else {\n            this.position.column += 1;\n            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n            this.position.offset += code < 0x10000 ? 1 : 2;\n        }\n    };\n    /**\n     * If the substring starting at the current position of the parser has\n     * the given prefix, then bump the parser to the character immediately\n     * following the prefix and return true. Otherwise, don't bump the parser\n     * and return false.\n     */ Parser.prototype.bumpIf = function(prefix) {\n        if (startsWith(this.message, prefix, this.offset())) {\n            for(var i = 0; i < prefix.length; i++){\n                this.bump();\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Bump the parser until the pattern character is found and return `true`.\n     * Otherwise bump to the end of the file and return `false`.\n     */ Parser.prototype.bumpUntil = function(pattern) {\n        var currentOffset = this.offset();\n        var index = this.message.indexOf(pattern, currentOffset);\n        if (index >= 0) {\n            this.bumpTo(index);\n            return true;\n        } else {\n            this.bumpTo(this.message.length);\n            return false;\n        }\n    };\n    /**\n     * Bump the parser to the target offset.\n     * If target offset is beyond the end of the input, bump the parser to the end of the input.\n     */ Parser.prototype.bumpTo = function(targetOffset) {\n        if (this.offset() > targetOffset) {\n            throw Error(\"targetOffset \".concat(targetOffset, \" must be greater than or equal to the current offset \").concat(this.offset()));\n        }\n        targetOffset = Math.min(targetOffset, this.message.length);\n        while(true){\n            var offset = this.offset();\n            if (offset === targetOffset) {\n                break;\n            }\n            if (offset > targetOffset) {\n                throw Error(\"targetOffset \".concat(targetOffset, \" is at invalid UTF-16 code unit boundary\"));\n            }\n            this.bump();\n            if (this.isEOF()) {\n                break;\n            }\n        }\n    };\n    /** advance the parser through all whitespace to the next non-whitespace code unit. */ Parser.prototype.bumpSpace = function() {\n        while(!this.isEOF() && _isWhiteSpace(this.char())){\n            this.bump();\n        }\n    };\n    /**\n     * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n     * If the input has been exhausted, then this returns null.\n     */ Parser.prototype.peek = function() {\n        if (this.isEOF()) {\n            return null;\n        }\n        var code = this.char();\n        var offset = this.offset();\n        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n        return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n    };\n    return Parser;\n}();\n\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */ function _isAlpha(codepoint) {\n    return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;\n}\nfunction _isAlphaOrSlash(codepoint) {\n    return _isAlpha(codepoint) || codepoint === 47; /* '/' */ \n}\n/** See `parseTag` function docs. */ function _isPotentialElementNameChar(c) {\n    return c === 45 /* '-' */  || c === 46 /* '.' */  || c >= 48 && c <= 57 || c === 95 /* '_' */  || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */ function _isWhiteSpace(c) {\n    return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */ function _isPatternSyntax(c) {\n    return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPACE_SEPARATOR_REGEX: () => (/* binding */ SPACE_SEPARATOR_REGEX),\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvcmVnZXguZ2VuZXJhdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQStCO0FBQ3hCLElBQUlBLHdCQUF3QiwrQ0FBK0M7QUFDM0UsSUFBSUMsb0JBQW9CLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlZWQtc2hvcC8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi9yZWdleC5nZW5lcmF0ZWQuanM/YjZiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZ2VuZXJhdGVkIGZyb20gcmVnZXgtZ2VuLnRzXG5leHBvcnQgdmFyIFNQQUNFX1NFUEFSQVRPUl9SRUdFWCA9IC9bIFxceEEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMF0vO1xuZXhwb3J0IHZhciBXSElURV9TUEFDRV9SRUdFWCA9IC9bXFx0LVxcciBcXHg4NVxcdTIwMEVcXHUyMDBGXFx1MjAyOFxcdTIwMjldLztcbiJdLCJuYW1lcyI6WyJTUEFDRV9TRVBBUkFUT1JfUkVHRVgiLCJXSElURV9TUEFDRV9SRUdFWCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   timeData: () => (/* binding */ timeData)\n/* harmony export */ });\n// @generated from time-data-gen.ts\n// prettier-ignore  \nvar timeData = {\n    \"AX\": [\n        \"H\"\n    ],\n    \"BQ\": [\n        \"H\"\n    ],\n    \"CP\": [\n        \"H\"\n    ],\n    \"CZ\": [\n        \"H\"\n    ],\n    \"DK\": [\n        \"H\"\n    ],\n    \"FI\": [\n        \"H\"\n    ],\n    \"ID\": [\n        \"H\"\n    ],\n    \"IS\": [\n        \"H\"\n    ],\n    \"ML\": [\n        \"H\"\n    ],\n    \"NE\": [\n        \"H\"\n    ],\n    \"RU\": [\n        \"H\"\n    ],\n    \"SE\": [\n        \"H\"\n    ],\n    \"SJ\": [\n        \"H\"\n    ],\n    \"SK\": [\n        \"H\"\n    ],\n    \"AS\": [\n        \"h\",\n        \"H\"\n    ],\n    \"BT\": [\n        \"h\",\n        \"H\"\n    ],\n    \"DJ\": [\n        \"h\",\n        \"H\"\n    ],\n    \"ER\": [\n        \"h\",\n        \"H\"\n    ],\n    \"GH\": [\n        \"h\",\n        \"H\"\n    ],\n    \"IN\": [\n        \"h\",\n        \"H\"\n    ],\n    \"LS\": [\n        \"h\",\n        \"H\"\n    ],\n    \"PG\": [\n        \"h\",\n        \"H\"\n    ],\n    \"PW\": [\n        \"h\",\n        \"H\"\n    ],\n    \"SO\": [\n        \"h\",\n        \"H\"\n    ],\n    \"TO\": [\n        \"h\",\n        \"H\"\n    ],\n    \"VU\": [\n        \"h\",\n        \"H\"\n    ],\n    \"WS\": [\n        \"h\",\n        \"H\"\n    ],\n    \"001\": [\n        \"H\",\n        \"h\"\n    ],\n    \"AL\": [\n        \"h\",\n        \"H\",\n        \"hB\"\n    ],\n    \"TD\": [\n        \"h\",\n        \"H\",\n        \"hB\"\n    ],\n    \"ca-ES\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"CF\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"CM\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"fr-CA\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"gl-ES\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"it-CH\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"it-IT\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"LU\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"NP\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"PF\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"SC\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"SM\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"SN\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"TF\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"VA\": [\n        \"H\",\n        \"h\",\n        \"hB\"\n    ],\n    \"CY\": [\n        \"h\",\n        \"H\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GR\": [\n        \"h\",\n        \"H\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CO\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"DO\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KP\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KR\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"NA\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"PA\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"PR\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"VE\": [\n        \"h\",\n        \"H\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"AC\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"AI\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"BW\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"BZ\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CC\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CK\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"CX\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"DG\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"FK\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GB\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GG\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"GI\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"IE\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"IM\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"IO\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"JE\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"LT\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"MK\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"MN\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"MS\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NF\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NG\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NR\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"NU\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"PN\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"SH\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"SX\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"TA\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"ZA\": [\n        \"H\",\n        \"h\",\n        \"hb\",\n        \"hB\"\n    ],\n    \"af-ZA\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"AR\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"CL\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"CR\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"CU\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"EA\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-BO\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-BR\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-EC\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-ES\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-GQ\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"es-PE\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"GT\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"HN\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"IC\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KG\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"KM\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"LK\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"MA\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"MX\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"NI\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"PY\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"SV\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"UY\": [\n        \"H\",\n        \"h\",\n        \"hB\",\n        \"hb\"\n    ],\n    \"JP\": [\n        \"H\",\n        \"h\",\n        \"K\"\n    ],\n    \"AD\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AM\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AO\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"AW\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BJ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BL\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"CG\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"CI\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"CV\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"DE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"EE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"FR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GA\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GN\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GP\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"GW\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"HR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"IL\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"IT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"KZ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MC\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MD\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MQ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"MZ\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"NC\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"NL\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"PM\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"PT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"RE\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"RO\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"SI\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"SR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"ST\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"TG\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"TR\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"WF\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"YT\": [\n        \"H\",\n        \"hB\"\n    ],\n    \"BD\": [\n        \"h\",\n        \"hB\",\n        \"H\"\n    ],\n    \"PK\": [\n        \"h\",\n        \"hB\",\n        \"H\"\n    ],\n    \"AZ\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"BA\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"BG\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"CH\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"GE\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"LI\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"ME\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"RS\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"UA\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"UZ\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"XK\": [\n        \"H\",\n        \"hB\",\n        \"h\"\n    ],\n    \"AG\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"AU\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BB\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BS\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"CA\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"DM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"en-001\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"FJ\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"FM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GD\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GU\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"GY\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"JM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"KI\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"KN\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"KY\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"LC\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"LR\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"MH\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"MP\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"MW\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"NZ\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SB\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SG\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SL\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SS\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"SZ\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"TC\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"TT\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"UM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"US\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"VC\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"VG\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"VI\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"ZM\": [\n        \"h\",\n        \"hb\",\n        \"H\",\n        \"hB\"\n    ],\n    \"BO\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"EC\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"ES\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"GQ\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"PE\": [\n        \"H\",\n        \"hB\",\n        \"h\",\n        \"hb\"\n    ],\n    \"AE\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"ar-001\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"BH\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"DZ\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"EG\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"EH\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"HK\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"IQ\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"JO\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"KW\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"LB\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"LY\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"MO\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"MR\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"OM\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"PH\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"PS\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"QA\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"SA\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"SD\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"SY\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"TN\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"YE\": [\n        \"h\",\n        \"hB\",\n        \"hb\",\n        \"H\"\n    ],\n    \"AF\": [\n        \"H\",\n        \"hb\",\n        \"hB\",\n        \"h\"\n    ],\n    \"LA\": [\n        \"H\",\n        \"hb\",\n        \"hB\",\n        \"h\"\n    ],\n    \"CN\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"LV\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"TL\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"zu-ZA\": [\n        \"H\",\n        \"hB\",\n        \"hb\",\n        \"h\"\n    ],\n    \"CD\": [\n        \"hB\",\n        \"H\"\n    ],\n    \"IR\": [\n        \"hB\",\n        \"H\"\n    ],\n    \"hi-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"kn-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"ml-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"te-IN\": [\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"KH\": [\n        \"hB\",\n        \"h\",\n        \"H\",\n        \"hb\"\n    ],\n    \"ta-IN\": [\n        \"hB\",\n        \"h\",\n        \"hb\",\n        \"H\"\n    ],\n    \"BN\": [\n        \"hb\",\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"MY\": [\n        \"hb\",\n        \"hB\",\n        \"h\",\n        \"H\"\n    ],\n    \"ET\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"gu-IN\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"mr-IN\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"pa-IN\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"TW\": [\n        \"hB\",\n        \"hb\",\n        \"h\",\n        \"H\"\n    ],\n    \"KE\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ],\n    \"MM\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ],\n    \"TZ\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ],\n    \"UG\": [\n        \"hB\",\n        \"hb\",\n        \"H\",\n        \"h\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-messageformat-parser/lib/types.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKELETON_TYPE: () => (/* binding */ SKELETON_TYPE),\n/* harmony export */   TYPE: () => (/* binding */ TYPE),\n/* harmony export */   createLiteralElement: () => (/* binding */ createLiteralElement),\n/* harmony export */   createNumberElement: () => (/* binding */ createNumberElement),\n/* harmony export */   isArgumentElement: () => (/* binding */ isArgumentElement),\n/* harmony export */   isDateElement: () => (/* binding */ isDateElement),\n/* harmony export */   isDateTimeSkeleton: () => (/* binding */ isDateTimeSkeleton),\n/* harmony export */   isLiteralElement: () => (/* binding */ isLiteralElement),\n/* harmony export */   isNumberElement: () => (/* binding */ isNumberElement),\n/* harmony export */   isNumberSkeleton: () => (/* binding */ isNumberSkeleton),\n/* harmony export */   isPluralElement: () => (/* binding */ isPluralElement),\n/* harmony export */   isPoundElement: () => (/* binding */ isPoundElement),\n/* harmony export */   isSelectElement: () => (/* binding */ isSelectElement),\n/* harmony export */   isTagElement: () => (/* binding */ isTagElement),\n/* harmony export */   isTimeElement: () => (/* binding */ isTimeElement)\n/* harmony export */ });\nvar TYPE;\n(function(TYPE) {\n    /**\n     * Raw text\n     */ TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */ TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n    /**\n     * Variable w/ number format\n     */ TYPE[TYPE[\"number\"] = 2] = \"number\";\n    /**\n     * Variable w/ date format\n     */ TYPE[TYPE[\"date\"] = 3] = \"date\";\n    /**\n     * Variable w/ time format\n     */ TYPE[TYPE[\"time\"] = 4] = \"time\";\n    /**\n     * Variable w/ select format\n     */ TYPE[TYPE[\"select\"] = 5] = \"select\";\n    /**\n     * Variable w/ plural format\n     */ TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n    /**\n     * Only possible within plural argument.\n     * This is the `#` symbol that will be substituted with the count.\n     */ TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n    /**\n     * XML-like tag\n     */ TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nvar SKELETON_TYPE;\n(function(SKELETON_TYPE) {\n    SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n    SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */ function isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n    return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n    return el.type === TYPE.pound;\n}\nfunction isTagElement(el) {\n    return el.type === TYPE.tag;\n}\nfunction isNumberSkeleton(el) {\n    return !!(el && typeof el === \"object\" && el.type === SKELETON_TYPE.number);\n}\nfunction isDateTimeSkeleton(el) {\n    return !!(el && typeof el === \"object\" && el.type === SKELETON_TYPE.dateTime);\n}\nfunction createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value\n    };\n}\nfunction createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1tZXNzYWdlZm9ybWF0LXBhcnNlci9saWIvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBSUEsS0FBSztBQUNmLFVBQVVBLElBQUk7SUFDWDs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzVCOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDN0I7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUMzQjs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0lBQ3pCOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekI7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUMzQjs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQzNCOzs7S0FHQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQzFCOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7QUFDNUIsR0FBR0EsUUFBU0EsQ0FBQUEsT0FBTyxDQUFDO0FBQ2IsSUFBSUMsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQzdDQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0FBQ25ELEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDdEM7O0NBRUMsR0FDTSxTQUFTQyxpQkFBaUJDLEVBQUU7SUFDL0IsT0FBT0EsR0FBR0MsSUFBSSxLQUFLSixLQUFLSyxPQUFPO0FBQ25DO0FBQ08sU0FBU0Msa0JBQWtCSCxFQUFFO0lBQ2hDLE9BQU9BLEdBQUdDLElBQUksS0FBS0osS0FBS08sUUFBUTtBQUNwQztBQUNPLFNBQVNDLGdCQUFnQkwsRUFBRTtJQUM5QixPQUFPQSxHQUFHQyxJQUFJLEtBQUtKLEtBQUtTLE1BQU07QUFDbEM7QUFDTyxTQUFTQyxjQUFjUCxFQUFFO0lBQzVCLE9BQU9BLEdBQUdDLElBQUksS0FBS0osS0FBS1csSUFBSTtBQUNoQztBQUNPLFNBQVNDLGNBQWNULEVBQUU7SUFDNUIsT0FBT0EsR0FBR0MsSUFBSSxLQUFLSixLQUFLYSxJQUFJO0FBQ2hDO0FBQ08sU0FBU0MsZ0JBQWdCWCxFQUFFO0lBQzlCLE9BQU9BLEdBQUdDLElBQUksS0FBS0osS0FBS2UsTUFBTTtBQUNsQztBQUNPLFNBQVNDLGdCQUFnQmIsRUFBRTtJQUM5QixPQUFPQSxHQUFHQyxJQUFJLEtBQUtKLEtBQUtpQixNQUFNO0FBQ2xDO0FBQ08sU0FBU0MsZUFBZWYsRUFBRTtJQUM3QixPQUFPQSxHQUFHQyxJQUFJLEtBQUtKLEtBQUttQixLQUFLO0FBQ2pDO0FBQ08sU0FBU0MsYUFBYWpCLEVBQUU7SUFDM0IsT0FBT0EsR0FBR0MsSUFBSSxLQUFLSixLQUFLcUIsR0FBRztBQUMvQjtBQUNPLFNBQVNDLGlCQUFpQm5CLEVBQUU7SUFDL0IsT0FBTyxDQUFDLENBQUVBLENBQUFBLE1BQU0sT0FBT0EsT0FBTyxZQUFZQSxHQUFHQyxJQUFJLEtBQUtILGNBQWNRLE1BQU07QUFDOUU7QUFDTyxTQUFTYyxtQkFBbUJwQixFQUFFO0lBQ2pDLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxNQUFNLE9BQU9BLE9BQU8sWUFBWUEsR0FBR0MsSUFBSSxLQUFLSCxjQUFjdUIsUUFBUTtBQUNoRjtBQUNPLFNBQVNDLHFCQUFxQkMsS0FBSztJQUN0QyxPQUFPO1FBQ0h0QixNQUFNSixLQUFLSyxPQUFPO1FBQ2xCcUIsT0FBT0E7SUFDWDtBQUNKO0FBQ08sU0FBU0Msb0JBQW9CRCxLQUFLLEVBQUVFLEtBQUs7SUFDNUMsT0FBTztRQUNIeEIsTUFBTUosS0FBS1MsTUFBTTtRQUNqQmlCLE9BQU9BO1FBQ1BFLE9BQU9BO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3NlZWQtc2hvcC8uL25vZGVfbW9kdWxlcy9AZm9ybWF0anMvaWN1LW1lc3NhZ2Vmb3JtYXQtcGFyc2VyL2xpYi90eXBlcy5qcz84ZGQxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgVFlQRTtcbihmdW5jdGlvbiAoVFlQRSkge1xuICAgIC8qKlxuICAgICAqIFJhdyB0ZXh0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wibGl0ZXJhbFwiXSA9IDBdID0gXCJsaXRlcmFsXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy9vIGFueSBmb3JtYXQsIGUuZyBgdmFyYCBpbiBgdGhpcyBpcyBhIHt2YXJ9YFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImFyZ3VtZW50XCJdID0gMV0gPSBcImFyZ3VtZW50XCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gbnVtYmVyIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcIm51bWJlclwiXSA9IDJdID0gXCJudW1iZXJcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBkYXRlIGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcImRhdGVcIl0gPSAzXSA9IFwiZGF0ZVwiO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHcvIHRpbWUgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1widGltZVwiXSA9IDRdID0gXCJ0aW1lXCI7XG4gICAgLyoqXG4gICAgICogVmFyaWFibGUgdy8gc2VsZWN0IGZvcm1hdFxuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInNlbGVjdFwiXSA9IDVdID0gXCJzZWxlY3RcIjtcbiAgICAvKipcbiAgICAgKiBWYXJpYWJsZSB3LyBwbHVyYWwgZm9ybWF0XG4gICAgICovXG4gICAgVFlQRVtUWVBFW1wicGx1cmFsXCJdID0gNl0gPSBcInBsdXJhbFwiO1xuICAgIC8qKlxuICAgICAqIE9ubHkgcG9zc2libGUgd2l0aGluIHBsdXJhbCBhcmd1bWVudC5cbiAgICAgKiBUaGlzIGlzIHRoZSBgI2Agc3ltYm9sIHRoYXQgd2lsbCBiZSBzdWJzdGl0dXRlZCB3aXRoIHRoZSBjb3VudC5cbiAgICAgKi9cbiAgICBUWVBFW1RZUEVbXCJwb3VuZFwiXSA9IDddID0gXCJwb3VuZFwiO1xuICAgIC8qKlxuICAgICAqIFhNTC1saWtlIHRhZ1xuICAgICAqL1xuICAgIFRZUEVbVFlQRVtcInRhZ1wiXSA9IDhdID0gXCJ0YWdcIjtcbn0pKFRZUEUgfHwgKFRZUEUgPSB7fSkpO1xuZXhwb3J0IHZhciBTS0VMRVRPTl9UWVBFO1xuKGZ1bmN0aW9uIChTS0VMRVRPTl9UWVBFKSB7XG4gICAgU0tFTEVUT05fVFlQRVtTS0VMRVRPTl9UWVBFW1wibnVtYmVyXCJdID0gMF0gPSBcIm51bWJlclwiO1xuICAgIFNLRUxFVE9OX1RZUEVbU0tFTEVUT05fVFlQRVtcImRhdGVUaW1lXCJdID0gMV0gPSBcImRhdGVUaW1lXCI7XG59KShTS0VMRVRPTl9UWVBFIHx8IChTS0VMRVRPTl9UWVBFID0ge30pKTtcbi8qKlxuICogVHlwZSBHdWFyZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5saXRlcmFsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJndW1lbnRFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUuYXJndW1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLnR5cGUgPT09IFRZUEUubnVtYmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5kYXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVGltZUVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50aW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbC50eXBlID09PSBUWVBFLnNlbGVjdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BsdXJhbEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wbHVyYWw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQb3VuZEVsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS5wb3VuZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ0VsZW1lbnQoZWwpIHtcbiAgICByZXR1cm4gZWwudHlwZSA9PT0gVFlQRS50YWc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJTa2VsZXRvbihlbCkge1xuICAgIHJldHVybiAhIShlbCAmJiB0eXBlb2YgZWwgPT09ICdvYmplY3QnICYmIGVsLnR5cGUgPT09IFNLRUxFVE9OX1RZUEUubnVtYmVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVUaW1lU2tlbGV0b24oZWwpIHtcbiAgICByZXR1cm4gISEoZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiBlbC50eXBlID09PSBTS0VMRVRPTl9UWVBFLmRhdGVUaW1lKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaXRlcmFsRWxlbWVudCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEUubGl0ZXJhbCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTnVtYmVyRWxlbWVudCh2YWx1ZSwgc3R5bGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFLm51bWJlcixcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJUWVBFIiwiU0tFTEVUT05fVFlQRSIsImlzTGl0ZXJhbEVsZW1lbnQiLCJlbCIsInR5cGUiLCJsaXRlcmFsIiwiaXNBcmd1bWVudEVsZW1lbnQiLCJhcmd1bWVudCIsImlzTnVtYmVyRWxlbWVudCIsIm51bWJlciIsImlzRGF0ZUVsZW1lbnQiLCJkYXRlIiwiaXNUaW1lRWxlbWVudCIsInRpbWUiLCJpc1NlbGVjdEVsZW1lbnQiLCJzZWxlY3QiLCJpc1BsdXJhbEVsZW1lbnQiLCJwbHVyYWwiLCJpc1BvdW5kRWxlbWVudCIsInBvdW5kIiwiaXNUYWdFbGVtZW50IiwidGFnIiwiaXNOdW1iZXJTa2VsZXRvbiIsImlzRGF0ZVRpbWVTa2VsZXRvbiIsImRhdGVUaW1lIiwiY3JlYXRlTGl0ZXJhbEVsZW1lbnQiLCJ2YWx1ZSIsImNyZWF0ZU51bWJlckVsZW1lbnQiLCJzdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* binding */ parseDateTimeSkeleton)\n/* harmony export */ });\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */ var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */ function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function(match) {\n        var len = match.length;\n        switch(match[0]){\n            // Era\n            case \"G\":\n                result.era = len === 4 ? \"long\" : len === 5 ? \"narrow\" : \"short\";\n                break;\n            // Year\n            case \"y\":\n                result.year = len === 2 ? \"2-digit\" : \"numeric\";\n                break;\n            case \"Y\":\n            case \"u\":\n            case \"U\":\n            case \"r\":\n                throw new RangeError(\"`Y/u/U/r` (year) patterns are not supported, use `y` instead\");\n            // Quarter\n            case \"q\":\n            case \"Q\":\n                throw new RangeError(\"`q/Q` (quarter) patterns are not supported\");\n            // Month\n            case \"M\":\n            case \"L\":\n                result.month = [\n                    \"numeric\",\n                    \"2-digit\",\n                    \"short\",\n                    \"long\",\n                    \"narrow\"\n                ][len - 1];\n                break;\n            // Week\n            case \"w\":\n            case \"W\":\n                throw new RangeError(\"`w/W` (week) patterns are not supported\");\n            case \"d\":\n                result.day = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"D\":\n            case \"F\":\n            case \"g\":\n                throw new RangeError(\"`D/F/g` (day) patterns are not supported, use `d` instead\");\n            // Weekday\n            case \"E\":\n                result.weekday = len === 4 ? \"short\" : len === 5 ? \"narrow\" : \"short\";\n                break;\n            case \"e\":\n                if (len < 4) {\n                    throw new RangeError(\"`e..eee` (weekday) patterns are not supported\");\n                }\n                result.weekday = [\n                    \"short\",\n                    \"long\",\n                    \"narrow\",\n                    \"short\"\n                ][len - 4];\n                break;\n            case \"c\":\n                if (len < 4) {\n                    throw new RangeError(\"`c..ccc` (weekday) patterns are not supported\");\n                }\n                result.weekday = [\n                    \"short\",\n                    \"long\",\n                    \"narrow\",\n                    \"short\"\n                ][len - 4];\n                break;\n            // Period\n            case \"a\":\n                result.hour12 = true;\n                break;\n            case \"b\":\n            case \"B\":\n                throw new RangeError(\"`b/B` (period) patterns are not supported, use `a` instead\");\n            // Hour\n            case \"h\":\n                result.hourCycle = \"h12\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"H\":\n                result.hourCycle = \"h23\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"K\":\n                result.hourCycle = \"h11\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"k\":\n                result.hourCycle = \"h24\";\n                result.hour = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"j\":\n            case \"J\":\n            case \"C\":\n                throw new RangeError(\"`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead\");\n            // Minute\n            case \"m\":\n                result.minute = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            // Second\n            case \"s\":\n                result.second = [\n                    \"numeric\",\n                    \"2-digit\"\n                ][len - 1];\n                break;\n            case \"S\":\n            case \"A\":\n                throw new RangeError(\"`S/A` (second) patterns are not supported, use `s` instead\");\n            // Zone\n            case \"z\":\n                result.timeZoneName = len < 4 ? \"short\" : \"long\";\n                break;\n            case \"Z\":\n            case \"O\":\n            case \"v\":\n            case \"V\":\n            case \"X\":\n            case \"x\":\n                throw new RangeError(\"`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead\");\n        }\n        return \"\";\n    });\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateTimeSkeleton: () => (/* reexport safe */ _date_time__WEBPACK_IMPORTED_MODULE_0__.parseDateTimeSkeleton),\n/* harmony export */   parseNumberSkeleton: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var _date_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-time */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\");\n/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRCO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZWVkLXNob3AvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL2luZGV4LmpzP2MwMTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kYXRlLXRpbWUnO1xuZXhwb3J0ICogZnJvbSAnLi9udW1iZXInO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js":
/*!******************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/number.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNumberSkeleton: () => (/* binding */ parseNumberSkeleton),\n/* harmony export */   parseNumberSkeletonFromString: () => (/* binding */ parseNumberSkeletonFromString)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.generated */ \"(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\");\n\n\nfunction parseNumberSkeletonFromString(skeleton) {\n    if (skeleton.length === 0) {\n        throw new Error(\"Number skeleton cannot be empty\");\n    }\n    // Parse the skeleton\n    var stringTokens = skeleton.split(_regex_generated__WEBPACK_IMPORTED_MODULE_0__.WHITE_SPACE_REGEX).filter(function(x) {\n        return x.length > 0;\n    });\n    var tokens = [];\n    for(var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++){\n        var stringToken = stringTokens_1[_i];\n        var stemAndOptions = stringToken.split(\"/\");\n        if (stemAndOptions.length === 0) {\n            throw new Error(\"Invalid number skeleton\");\n        }\n        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);\n        for(var _a = 0, options_1 = options; _a < options_1.length; _a++){\n            var option = options_1[_a];\n            if (option.length === 0) {\n                throw new Error(\"Invalid number skeleton\");\n            }\n        }\n        tokens.push({\n            stem: stem,\n            options: options\n        });\n    }\n    return tokens;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, \"\");\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    if (str[str.length - 1] === \"r\") {\n        result.roundingPriority = \"morePrecision\";\n    } else if (str[str.length - 1] === \"s\") {\n        result.roundingPriority = \"lessPrecision\";\n    }\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function(_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== \"string\") {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        } else if (g2 === \"+\") {\n            result.minimumSignificantDigits = g1.length;\n        } else if (g1[0] === \"#\") {\n            result.maximumSignificantDigits = g1.length;\n        } else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length + (typeof g2 === \"string\" ? g2.length : 0);\n        }\n        return \"\";\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch(str){\n        case \"sign-auto\":\n            return {\n                signDisplay: \"auto\"\n            };\n        case \"sign-accounting\":\n        case \"()\":\n            return {\n                currencySign: \"accounting\"\n            };\n        case \"sign-always\":\n        case \"+!\":\n            return {\n                signDisplay: \"always\"\n            };\n        case \"sign-accounting-always\":\n        case \"()!\":\n            return {\n                signDisplay: \"always\",\n                currencySign: \"accounting\"\n            };\n        case \"sign-except-zero\":\n        case \"+?\":\n            return {\n                signDisplay: \"exceptZero\"\n            };\n        case \"sign-accounting-except-zero\":\n        case \"()?\":\n            return {\n                signDisplay: \"exceptZero\",\n                currencySign: \"accounting\"\n            };\n        case \"sign-never\":\n        case \"+_\":\n            return {\n                signDisplay: \"never\"\n            };\n    }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n    // Engineering\n    var result;\n    if (stem[0] === \"E\" && stem[1] === \"E\") {\n        result = {\n            notation: \"engineering\"\n        };\n        stem = stem.slice(2);\n    } else if (stem[0] === \"E\") {\n        result = {\n            notation: \"scientific\"\n        };\n        stem = stem.slice(1);\n    }\n    if (result) {\n        var signDisplay = stem.slice(0, 2);\n        if (signDisplay === \"+!\") {\n            result.signDisplay = \"always\";\n            stem = stem.slice(2);\n        } else if (signDisplay === \"+?\") {\n            result.signDisplay = \"exceptZero\";\n            stem = stem.slice(2);\n        }\n        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n            throw new Error(\"Malformed concise eng/scientific notation\");\n        }\n        result.minimumIntegerDigits = stem.length;\n    }\n    return result;\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */ function parseNumberSkeleton(tokens) {\n    var result = {};\n    for(var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++){\n        var token = tokens_1[_i];\n        switch(token.stem){\n            case \"percent\":\n            case \"%\":\n                result.style = \"percent\";\n                continue;\n            case \"%x100\":\n                result.style = \"percent\";\n                result.scale = 100;\n                continue;\n            case \"currency\":\n                result.style = \"currency\";\n                result.currency = token.options[0];\n                continue;\n            case \"group-off\":\n            case \",_\":\n                result.useGrouping = false;\n                continue;\n            case \"precision-integer\":\n            case \".\":\n                result.maximumFractionDigits = 0;\n                continue;\n            case \"measure-unit\":\n            case \"unit\":\n                result.style = \"unit\";\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case \"compact-short\":\n            case \"K\":\n                result.notation = \"compact\";\n                result.compactDisplay = \"short\";\n                continue;\n            case \"compact-long\":\n            case \"KK\":\n                result.notation = \"compact\";\n                result.compactDisplay = \"long\";\n                continue;\n            case \"scientific\":\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n                    notation: \"scientific\"\n                }), token.options.reduce(function(all, opt) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n                }, {}));\n                continue;\n            case \"engineering\":\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n                    notation: \"engineering\"\n                }), token.options.reduce(function(all, opt) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt));\n                }, {}));\n                continue;\n            case \"notation-simple\":\n                result.notation = \"standard\";\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case \"unit-width-narrow\":\n                result.currencyDisplay = \"narrowSymbol\";\n                result.unitDisplay = \"narrow\";\n                continue;\n            case \"unit-width-short\":\n                result.currencyDisplay = \"code\";\n                result.unitDisplay = \"short\";\n                continue;\n            case \"unit-width-full-name\":\n                result.currencyDisplay = \"name\";\n                result.unitDisplay = \"long\";\n                continue;\n            case \"unit-width-iso-code\":\n                result.currencyDisplay = \"symbol\";\n                continue;\n            case \"scale\":\n                result.scale = parseFloat(token.options[0]);\n                continue;\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n            case \"integer-width\":\n                if (token.options.length > 1) {\n                    throw new RangeError(\"integer-width stems only accept a single optional option\");\n                }\n                token.options[0].replace(INTEGER_WIDTH_REGEX, function(_, g1, g2, g3, g4, g5) {\n                    if (g1) {\n                        result.minimumIntegerDigits = g2.length;\n                    } else if (g3 && g4) {\n                        throw new Error(\"We currently do not support maximum integer digits\");\n                    } else if (g5) {\n                        throw new Error(\"We currently do not support exact integer digits\");\n                    }\n                    return \"\";\n                });\n                continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n            result.minimumIntegerDigits = token.stem.length;\n            continue;\n        }\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            // Precision\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n            // precision-integer case\n            if (token.options.length > 1) {\n                throw new RangeError(\"Fraction-precision stems only accept a single optional option\");\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function(_, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === \"*\") {\n                    result.minimumFractionDigits = g1.length;\n                } else if (g3 && g3[0] === \"#\") {\n                    result.maximumFractionDigits = g3.length;\n                } else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                } else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return \"\";\n            });\n            var opt = token.options[0];\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n            if (opt === \"w\") {\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), {\n                    trailingZeroDisplay: \"stripIfInteger\"\n                });\n            } else if (opt) {\n                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(opt));\n            }\n            continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), signOpts);\n        }\n        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n        if (conciseScientificAndEngineeringOpts) {\n            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), conciseScientificAndEngineeringOpts);\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)\n/* harmony export */ });\n// @generated from regex-gen.ts\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0JBQStCO0FBQ3hCLElBQUlBLG9CQUFvQix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZWVkLXNob3AvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ljdS1za2VsZXRvbi1wYXJzZXIvbGliL3JlZ2V4LmdlbmVyYXRlZC5qcz8xMWFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEBnZW5lcmF0ZWQgZnJvbSByZWdleC1nZW4udHNcbmV4cG9ydCB2YXIgV0hJVEVfU1BBQ0VfUkVHRVggPSAvW1xcdC1cXHIgXFx4ODVcXHUyMDBFXFx1MjAwRlxcdTIwMjhcXHUyMDI5XS9pO1xuIl0sIm5hbWVzIjpbIldISVRFX1NQQUNFX1JFR0VYIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\n");

/***/ })

};
;